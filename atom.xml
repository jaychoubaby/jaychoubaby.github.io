<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ฅ՞•ﻌ•՞ฅ</title>
  
  <subtitle>这巷弄太过弯曲走不回故事里
</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jaychoubaby.github.io/"/>
  <updated>2019-03-25T02:28:35.521Z</updated>
  <id>https://jaychoubaby.github.io/</id>
  
  <author>
    <name>Back</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github每次发布重新绑定域名问题</title>
    <link href="https://jaychoubaby.github.io/2019/03/25/Github%E6%AF%8F%E6%AC%A1%E5%8F%91%E5%B8%83%E9%87%8D%E6%96%B0%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E9%97%AE%E9%A2%98/"/>
    <id>https://jaychoubaby.github.io/2019/03/25/Github每次发布重新绑定域名问题/</id>
    <published>2019-03-25T02:12:57.000Z</published>
    <updated>2019-03-25T02:28:35.521Z</updated>
    
    <content type="html"><![CDATA[<h3 id="github搭建的hexo博客可以设置自定义域名，如果不配置的话每次都需要手动设置，每次发布就需要设置一次"><a href="#github搭建的hexo博客可以设置自定义域名，如果不配置的话每次都需要手动设置，每次发布就需要设置一次" class="headerlink" title="github搭建的hexo博客可以设置自定义域名，如果不配置的话每次都需要手动设置，每次发布就需要设置一次"></a>github搭建的hexo博客可以设置自定义域名，如果不配置的话每次都需要手动设置，每次发布就需要设置一次</h3><p>解决办法：只需要在主题根目录、项目根目录、一级source根目录放置’CNAME’文件即可</p><h3 id="另外新装hexo环境下hexo-d可能会遇到报错的问题"><a href="#另外新装hexo环境下hexo-d可能会遇到报错的问题" class="headerlink" title="另外新装hexo环境下hexo d可能会遇到报错的问题"></a>另外新装hexo环境下hexo d可能会遇到报错的问题</h3><p>解决办法： 设置<code>_config.yml</code> - <code>auto_detect</code> 为 <code>false</code> 即可.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;github搭建的hexo博客可以设置自定义域名，如果不配置的话每次都需要手动设置，每次发布就需要设置一次&quot;&gt;&lt;a href=&quot;#github搭建的hexo博客可以设置自定义域名，如果不配置的话每次都需要手动设置，每次发布就需要设置一次&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="blog" scheme="https://jaychoubaby.github.io/categories/blog/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="博客" scheme="https://jaychoubaby.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="https://jaychoubaby.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://jaychoubaby.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7.4搭建shadowsocks</title>
    <link href="https://jaychoubaby.github.io/2019/03/02/CentOS7-4%E6%90%AD%E5%BB%BAshadowsocks/"/>
    <id>https://jaychoubaby.github.io/2019/03/02/CentOS7-4搭建shadowsocks/</id>
    <published>2019-03-02T12:29:57.000Z</published>
    <updated>2019-03-25T01:57:09.726Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h3><p>pip是 python 的包管理工具。在本文中将使用 python 版本的 shadowsocks，此版本的 shadowsocks 已发布到 pip 上，因此我们需要通过 pip 命令来安装。</p><p>在控制台执行以下命令安装 pip：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;</span><br><span class="line">[root@server ~]# python get-pip.py</span><br></pre></td></tr></table></figure><h3 id="安装配置-shadowsocks"><a href="#安装配置-shadowsocks" class="headerlink" title="安装配置 shadowsocks"></a>安装配置 shadowsocks</h3><p>在控制台执行以下命令安装 shadowsocks：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# pip install --upgrade pip</span><br><span class="line">[root@server ~]# pip install shadowsocks</span><br></pre></td></tr></table></figure><p>安装完成后，需要创建shadowsocks的配置文件/etc/shadowsocks.json，编辑内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# vim /etc/shadowsocks.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">  &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">  &quot;local_port&quot;: 1080,</span><br><span class="line">  &quot;port_password&quot;: &#123;</span><br><span class="line">    &quot;8080&quot;: &quot;填写密码&quot;,</span><br><span class="line">    &quot;8081&quot;: &quot;填写密码&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;timeout&quot;: 600,</span><br><span class="line">  &quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>method为加密方法，可选aes-128-cfb, aes-192-cfb, aes-256-cfb, bf-cfb, cast5-cfb, des-cfb, rc4-md5, chacha20, salsa20, rc4, table<br>port_password为端口对应的密码，可使用密码生成工具生成一个随机密码<br>以上两项信息在配置 shadowsocks 客户端时需要配置一致，具体说明可查看 shadowsocks 的帮助文档。</p><p><strong>如果你不需要配置多个端口的话，仅配置单个端口，则可以使用以下配置：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">  &quot;server_port&quot;: 8080,</span><br><span class="line">  &quot;password&quot;: &quot;填写密码&quot;,</span><br><span class="line">  &quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>server_port为服务监听端口</li><li>password为密码</li></ul><p>同样的以上两项信息在配置 shadowsocks 客户端时需要配置一致。</p><h3 id="配置自启动"><a href="#配置自启动" class="headerlink" title="配置自启动"></a>配置自启动</h3><p>编辑shadowsocks 服务的启动脚本文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# vim /etc/systemd/system/shadowsocks.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>执行以下命令启动 shadowsocks 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# systemctl enable shadowsocks</span><br><span class="line">[root@server ~]# systemctl start shadowsocks</span><br></pre></td></tr></table></figure><p>检查 shadowsocks 服务是否已成功启动，可以执行以下命令查看服务的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status shadowsocks -l</span><br></pre></td></tr></table></figure><p>确认服务启动成功后，配置防火墙规则，开放你配置的端口，不然客户端是无法连接的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">success</span><br><span class="line">[root@server ~]# firewall-cmd --zone=public --add-port=8081/tcp --permanent</span><br><span class="line">success</span><br><span class="line">[root@server ~]# firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure><p><strong>附上一键安装脚本代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># Install Shadowsocks on CentOS 7</span><br><span class="line"></span><br><span class="line">echo &quot;Installing Shadowsocks...&quot;</span><br><span class="line"></span><br><span class="line">random-string()</span><br><span class="line">&#123;</span><br><span class="line">    cat /dev/urandom | tr -dc &apos;a-zA-Z0-9&apos; | fold -w $&#123;1:-32&#125; | head -n 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CONFIG_FILE=/etc/shadowsocks.json</span><br><span class="line">SERVICE_FILE=/etc/systemd/system/shadowsocks.service</span><br><span class="line">SS_PASSWORD=$(random-string 32)</span><br><span class="line">SS_PORT=8388</span><br><span class="line">SS_METHOD=aes-256-cfb</span><br><span class="line">SS_IP=`ip route get 1 | awk &apos;&#123;print $NF;exit&#125;&apos;`</span><br><span class="line">GET_PIP_FILE=/tmp/get-pip.py</span><br><span class="line"></span><br><span class="line"># install pip</span><br><span class="line">curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;$&#123;GET_PIP_FILE&#125;&quot;</span><br><span class="line">python $&#123;GET_PIP_FILE&#125;</span><br><span class="line"></span><br><span class="line"># install shadowsocks</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">pip install shadowsocks</span><br><span class="line"></span><br><span class="line"># create shadowsocls config</span><br><span class="line">cat &lt;&lt;EOF | sudo tee $&#123;CONFIG_FILE&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">  &quot;server_port&quot;: $&#123;SS_PORT&#125;,</span><br><span class="line">  &quot;password&quot;: &quot;$&#123;SS_PASSWORD&#125;&quot;,</span><br><span class="line">  &quot;method&quot;: &quot;$&#123;SS_METHOD&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># create service</span><br><span class="line">cat &lt;&lt;EOF | sudo tee $&#123;SERVICE_FILE&#125;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/ssserver -c $&#123;CONFIG_FILE&#125;</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># start service</span><br><span class="line">systemctl enable shadowsocks</span><br><span class="line">systemctl start shadowsocks</span><br><span class="line"></span><br><span class="line"># view service status</span><br><span class="line">sleep 5</span><br><span class="line">systemctl status shadowsocks -l</span><br><span class="line"></span><br><span class="line">echo &quot;================================&quot;</span><br><span class="line">echo &quot;&quot;</span><br><span class="line">echo &quot;Congratulations! Shadowsocks has been installed on your system.&quot;</span><br><span class="line">echo &quot;You shadowsocks connection info:&quot;</span><br><span class="line">echo &quot;--------------------------------&quot;</span><br><span class="line">echo &quot;server:      $&#123;SS_IP&#125;&quot;</span><br><span class="line">echo &quot;server_port: $&#123;SS_PORT&#125;&quot;</span><br><span class="line">echo &quot;password:    $&#123;SS_PASSWORD&#125;&quot;</span><br><span class="line">echo &quot;method:      $&#123;SS_METHOD&#125;&quot;</span><br><span class="line">echo &quot;--------------------------------&quot;</span><br></pre></td></tr></table></figure><p><strong>配置客户端</strong><br>我这里配置的是windows的客户端，挺方便的，点击即用，不需要安装。</p><p>Windows客户端下载地址：<br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p><p>Mac客户端下载地址：<br><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/ShadowsocksX-NG/releases</a></p><p>Android客户端下载地址：<br><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android/releases</a></p><h3 id="配置BBR加速"><a href="#配置BBR加速" class="headerlink" title="配置BBR加速"></a>配置BBR加速</h3><p><strong>什么是BBR：</strong><br>TCP BBR是谷歌出品的TCP拥塞控制算法。BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。</p><p>Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。</p><p>TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。</p><p>BBR解决了两个问题：</p><p>在有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。</p><p>降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。<br>Google 在 2016年9月份开源了他们的优化网络拥堵算法BBR，最新版本的 Linux内核(4.9-rc8)中已经集成了该算法。</p><p>对于TCP单边加速，并非所有人都很熟悉，不过有另外一个大名鼎鼎的商业软件“锐速”，相信很多人都清楚。特别是对于使用国外服务器或者VPS的人来说，效果更佳。</p><p>BBR项目地址：<br><a href="https://github.com/google/bbr" target="_blank" rel="noopener">https://github.com/google/bbr</a></p><p><strong>升级内核，第一步首先是升级内核到支持BBR的版本：</strong></p><p>1.yum更新系统版本：<br><code>yum update</code><br>2.查看系统版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.4.1708 (Core) </span><br><span class="line">[root@server ~]#</span><br></pre></td></tr></table></figure><p>3.安装elrepo并升级内核：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">[root@server ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">[root@server ~]# yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br></pre></td></tr></table></figure><p>4.更新grub文件并重启系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \&apos;</span><br><span class="line">CentOS Linux 7 Rescue 8619ff5e1306499eac41c02d3b23868e (4.14.14-1.el7.elrepo.x86_64)</span><br><span class="line">CentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-693.11.6.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (0-rescue-c73a5ccf3b8145c3a675b64c4c3ab1d4) 7 (Core)</span><br><span class="line">[root@server ~]# grub2-set-default 0</span><br><span class="line">[root@server ~]# reboot</span><br></pre></td></tr></table></figure><p>5.重启完成后查看内核是否已更换为4.14版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# uname -r</span><br><span class="line">4.14.14-1.el7.elrepo.x86_64</span><br><span class="line">[root@server ~]#</span><br></pre></td></tr></table></figure><p>6.开启bbr：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# vim /etc/sysctl.conf    # 在文件末尾添加如下内容</span><br><span class="line">net.core.default_qdisc = fq</span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure><p>7.加载系统参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]# sysctl -p</span><br><span class="line">net.ipv6.conf.all.accept_ra = 2</span><br><span class="line">net.ipv6.conf.eth0.accept_ra = 2</span><br><span class="line">net.core.default_qdisc = fq</span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br><span class="line">[root@vultr ~]#</span><br></pre></td></tr></table></figure><p>如上，输出了我们添加的那两行配置代表正常。</p><p>8.确定bbr已经成功开启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]# sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br><span class="line">[root@vultr ~]# lsmod | grep bbr</span><br><span class="line">tcp_bbr                20480  2 </span><br><span class="line">[root@vultr ~]#</span><br></pre></td></tr></table></figure><p>输出内容如上，则表示bbr已经成功开启。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装-pip&quot;&gt;&lt;a href=&quot;#安装-pip&quot; class=&quot;headerlink&quot; title=&quot;安装 pip&quot;&gt;&lt;/a&gt;安装 pip&lt;/h3&gt;&lt;p&gt;pip是 python 的包管理工具。在本文中将使用 python 版本的 shadowsocks，此版本的
      
    
    </summary>
    
      <category term="blog" scheme="https://jaychoubaby.github.io/categories/blog/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="博客" scheme="https://jaychoubaby.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="linux" scheme="https://jaychoubaby.github.io/tags/linux/"/>
    
      <category term="ss" scheme="https://jaychoubaby.github.io/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>linux常用的环境安装</title>
    <link href="https://jaychoubaby.github.io/2019/01/29/linux%E5%B8%B8%E7%94%A8%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>https://jaychoubaby.github.io/2019/01/29/linux常用的环境安装/</id>
    <published>2019-01-29T03:41:50.000Z</published>
    <updated>2019-03-25T01:57:09.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="以tar-xz结尾的压缩包解压方式"><a href="#以tar-xz结尾的压缩包解压方式" class="headerlink" title="以tar.xz结尾的压缩包解压方式"></a>以tar.xz结尾的压缩包解压方式</h3><p>先 <code>xz -d ***.tar.xz</code> 得到tar结尾的包</p><p>然后 <code>tar -xvf  ***.tar</code> 解压</p><h3 id="Linux安装rz-sz命令"><a href="#Linux安装rz-sz命令" class="headerlink" title="Linux安装rz/sz命令"></a>Linux安装rz/sz命令</h3><blockquote><p>在SecureCRT这样的ssh登录软件里, 通过在Linux界面里输入rz/sz命令来上传/下载文件. 对于某些linux版本, rz/sz默认没有安装所以需要手工安装。<br>      sz: 将选定的文件发送(send)到本地机器;<br>      rz：运行该命令会弹出 一个文件选择窗口, 从本地选择文件上传到服务器(receive).</p></blockquote><p>最简单的是yum安装 <code>yum install lrzsz</code></p><p>没有网络的时候可以下载安装包安装</p><pre><code>首先通过sftp工具把安 装文件上传到tmp目录下.   # cd tmp   # wget http://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz   # tar zxvf lrzsz-0.12.20.tar.gz &amp;&amp; cd lrzsz-0.12.20   # ./configure &amp;&amp; make &amp;&amp; make install   上面安装过程默认把lsz和lrz安装到了/usr/local/bin/目录下, 下面创建软链接, 并命名为rz/sz:   # cd /usr/bin   # ln -s /usr/local/bin/lrz rz   # ln -s /usr/local/bin/lsz sz</code></pre><h3 id="Linux安装wget"><a href="#Linux安装wget" class="headerlink" title="Linux安装wget"></a>Linux安装wget</h3><pre><code>yum -y install wget</code></pre><h3 id="Linux安装Git"><a href="#Linux安装Git" class="headerlink" title="Linux安装Git"></a>Linux安装Git</h3><pre><code>yum install git-core</code></pre><h3 id="Linux安装Node-js"><a href="#Linux安装Node-js" class="headerlink" title="Linux安装Node.js"></a>Linux安装Node.js</h3><h4 id="不推荐在线安装，推荐编译安装："><a href="#不推荐在线安装，推荐编译安装：" class="headerlink" title="不推荐在线安装，推荐编译安装："></a>不推荐在线安装，推荐编译安装：</h4><pre><code>![](https://i.imgur.com/3ATr77h.png)</code></pre><ol><li><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">官网</a>获取到下载地址 <code>wget https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gz</code></li><li>解压 <code>tar -zxvf node-v10.15.0.tar.gz</code></li><li><p>解压完成后依次执行： cd node-v10.15.0</p><pre><code>./configuremake（编译时间较长，耐心等待）编译完成后，使用下面命令安装：sudo make install  这里一定要加sudo</code></pre><p><strong>此外</strong>，我们还可以使用git在github上将源码clone下来，同样执行以上命令编译安装。<br>执行<code>./configure</code>可能会提示确实c++框架，安装即可 <code>sudo yum install gcc gcc-c++</code></p></li></ol><h4 id="编译安装时间太长而且容易出错，可以使用yum安装"><a href="#编译安装时间太长而且容易出错，可以使用yum安装" class="headerlink" title="编译安装时间太长而且容易出错，可以使用yum安装"></a>编译安装时间太长而且容易出错，可以使用yum安装</h4><p>yum安装正常情况 <code>yum install nodejs</code>，但是会报错，原来 CentOS 的官方源并没有 Nodejs 的安装包，安装需要添加 EPEL 源，执行以下命令安装：<a href="https://jingsam.github.io/2015/12/01/install-nodejs-on-centos.html" target="_blank" rel="noopener">参考</a></p><pre><code>sudo rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpmsudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6sudo yum -y install nodejs npm --enablerepo=epel</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;以tar-xz结尾的压缩包解压方式&quot;&gt;&lt;a href=&quot;#以tar-xz结尾的压缩包解压方式&quot; class=&quot;headerlink&quot; title=&quot;以tar.xz结尾的压缩包解压方式&quot;&gt;&lt;/a&gt;以tar.xz结尾的压缩包解压方式&lt;/h3&gt;&lt;p&gt;先 &lt;code&gt;xz
      
    
    </summary>
    
      <category term="linux" scheme="https://jaychoubaby.github.io/categories/linux/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="学习" scheme="https://jaychoubaby.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="命令" scheme="https://jaychoubaby.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="linux" scheme="https://jaychoubaby.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux docker Shadowsocks 常规操作</title>
    <link href="https://jaychoubaby.github.io/2019/01/25/linux%20docker%20Shadowsocks%20%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/"/>
    <id>https://jaychoubaby.github.io/2019/01/25/linux docker Shadowsocks 常规操作/</id>
    <published>2019-01-25T09:12:50.000Z</published>
    <updated>2019-03-25T01:57:09.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="linux上跑ss，真的很简单"><a href="#linux上跑ss，真的很简单" class="headerlink" title="linux上跑ss，真的很简单"></a>linux上跑ss，真的很简单</h3><h4 id="第一步先装docker-CentOS最好是64位的，最好是CentOS7-6的话没试过应该有其他的办法"><a href="#第一步先装docker-CentOS最好是64位的，最好是CentOS7-6的话没试过应该有其他的办法" class="headerlink" title="第一步先装docker,CentOS最好是64位的，最好是CentOS7,6的话没试过应该有其他的办法"></a>第一步先装docker,CentOS最好是64位的，最好是CentOS7,6的话没试过应该有其他的办法</h4><ol><li>先检查内核版本 <code>$ uname -r</code> 返回的值大于3.10即可。</li></ol><p><img src="https://i.imgur.com/EhGW4Aw.png" alt=""></p><ol start="2"><li>使用 sudo 或 root 权限的用户登入终端。</li><li>确保yum是最新的 <code>$ yum update</code></li><li>安装 docker <code>yum install docker -y</code></li><li><p>启动 docker 服务 </p><pre><code>service docker startchkconfig docker on</code></pre></li><li><p>拉取 <a href="https://github.com/oddrationale/docker-shadowsocks?spm=a2c4e.11153940.blogcont599205.11.3fcb6ac5rqARUl" target="_blank" rel="noopener">docker 镜像</a>  <code>docker pull oddrationale/docker-shadowsocks</code></p></li></ol><p><img src="https://i.imgur.com/GIuhiPy.jpg" alt=""></p><ol start="7"><li><p>运行 docker 镜像 </p><pre><code>docker run -d -p 12345:12345 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 12345 -k welcome -m aes-256-cfb-d参数允许 docker 常驻后台运行-p来指定要映射的端口，这里端口号统一保持一致即可。例如：12345-s服务器 IP 地址，不用动-k后面设置你的 VPN 的密码，比如：welcome-m指定加密方式</code></pre></li><li>运行<code>docker ps -a</code>查看容器是否已成功运行起来了。</li></ol><h3 id="docker的常用命令汇总"><a href="#docker的常用命令汇总" class="headerlink" title="docker的常用命令汇总"></a>docker的常用命令汇总</h3><h4 id="1、docker的启动、停止、重启"><a href="#1、docker的启动、停止、重启" class="headerlink" title="1、docker的启动、停止、重启"></a>1、docker的启动、停止、重启</h4><pre><code>[root@localhost ~]# service docker restartRedirecting to /bin/systemctl restart docker.service[root@localhost ~]# service docker stopRedirecting to /bin/systemctl stop docker.service[root@localhost ~]# service docker startRedirecting to /bin/systemctl start docker.service</code></pre><h4 id="2、docker创建一个容器"><a href="#2、docker创建一个容器" class="headerlink" title="2、docker创建一个容器"></a>2、docker创建一个容器</h4><pre><code>[root@localhost ~]# docker run -it -v /docker_test:/yufei  --name yufei_6 centos[root@724e7701f0d4 /]#    -i：允许我们对容器内的 (STDIN) 进行交互  -t：在新容器内指定一个伪终端或终端 -v：是挂在宿机目录， /docker_test是宿机目录，/yufei是当前docker容器的目录，宿机目录必须是绝对的。--name：是给容器起一个名字，可省略，省略的话docker会随机产生一个名字</code></pre><h4 id="3、docker启动的容器列表"><a href="#3、docker启动的容器列表" class="headerlink" title="3、docker启动的容器列表"></a>3、docker启动的容器列表</h4><pre><code>[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES724e7701f0d4        centos              &quot;/bin/bash&quot;         4 minutes ago       Up 4 minutes                            yufei_6f9097691663e        centos              &quot;/bin/bash&quot;         5 minutes ago       Up 5 minutes                            yufei_5[root@localhost ~]# </code></pre><h4 id="4、查看docker创建的所有容器"><a href="#4、查看docker创建的所有容器" class="headerlink" title="4、查看docker创建的所有容器"></a>4、查看docker创建的所有容器</h4><pre><code>[root@localhost ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                        PORTS               NAMES724e7701f0d4        centos              &quot;/bin/bash&quot;         5 minutes ago       Up 5 minutes                                      yufei_6f9097691663e        centos              &quot;/bin/bash&quot;         6 minutes ago       Up 6 minutes                                      yufei_5e59a540fb979        centos              &quot;/bin/base&quot;         6 minutes ago       Created                                           yufei_4ff49dfedea4f        centos              &quot;/bin/bash&quot;         2 hours ago         Exited (137) 10 minutes ago                       yufei_03d2cc70abb5a5        centos              &quot;/bin/bash&quot;         2 hours ago         Exited (127) 2 hours ago                          yufei_022d48fc5b7c17        centos              &quot;/bin/bash&quot;         2 hours ago         Exited (127) 2 hours ago                          yufei_01[root@localhost ~]# </code></pre><h4 id="5、启动、停止、重启某个docker-容器"><a href="#5、启动、停止、重启某个docker-容器" class="headerlink" title="5、启动、停止、重启某个docker 容器"></a>5、启动、停止、重启某个docker 容器</h4><pre><code>[root@localhost ~]# docker start yufei_01yufei_01[root@localhost ~]# docker stop yufei_01yufei_01[root@localhost ~]# docker restart yufei_01yufei_01[root@localhost ~]# </code></pre><h4 id="6、查看指定容器的日志记录"><a href="#6、查看指定容器的日志记录" class="headerlink" title="6、查看指定容器的日志记录"></a>6、查看指定容器的日志记录</h4><pre><code>[root@back bin]# docker psCONTAINER ID        IMAGE                             COMMAND                  CREATED             STATUS              PORTS                    NAMESbaa114bbd3cd        oddrationale/docker-shadowsocks   &quot;/usr/local/bin/ss...&quot;   28 minutes ago      Up 28 minutes       0.0.0.0:9527-&gt;9527/tcp   eloquent_goldwasser[root@back bin]# docker logs -f baa114bbd3cd</code></pre><h4 id="7、删除某个容器，若正在运行，需要先停止"><a href="#7、删除某个容器，若正在运行，需要先停止" class="headerlink" title="7、删除某个容器，若正在运行，需要先停止"></a>7、删除某个容器，若正在运行，需要先停止</h4><pre><code>[root@localhost ~]# docker rm yufei_01Error response from daemon: You cannot remove a running container 2d48fc5b7c17b01e6247cbc012013306faf1e54f24651d5e16d6db4e15f92d33. Stop the container before attempting removal or use -f[root@localhost ~]# docker stop yufei_01yufei_01[root@localhost ~]# docker rm yufei_01yufei_01[root@localhost ~]# </code></pre><h4 id="8、删除所有容器"><a href="#8、删除所有容器" class="headerlink" title="8、删除所有容器"></a>8、删除所有容器</h4><pre><code>[root@localhost ~]# docker rm $(docker ps -a -q)Error response from daemon: You cannot remove a running container 724e7701f0d4a830167e21f75b470235a0e408fd6cc2913403426e96f69cba11. Stop the container before attempting removal or use -fError response from daemon: You cannot remove a running container f9097691663ee36f9d2ee56afbdcca0eeb8b63e5590ddf18c0c42954c93b9f06. Stop the container before attempting removal or use -f[root@localhost ~]# [root@localhost ~]# [root@localhost ~]# docker stop yufei_6yufei_6[root@localhost ~]# docker stop yufei_5yufei_5[root@localhost ~]# docker rm $(docker ps -a -q)724e7701f0d4f9097691663e[root@localhost ~]# </code></pre><h4 id="9、镜像"><a href="#9、镜像" class="headerlink" title="9、镜像"></a>9、镜像</h4><p>列出镜像:<code>docker image ls</code>或<code>docker images</code><br>列出所有镜像：<code>docker image ls -a</code><br>列出所有镜像：<code>docker images -a</code><br>查看镜像、容器、数据卷所占用的空间:<code>docker system df</code><br>删除镜像:<code>docker image rm</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;linux上跑ss，真的很简单&quot;&gt;&lt;a href=&quot;#linux上跑ss，真的很简单&quot; class=&quot;headerlink&quot; title=&quot;linux上跑ss，真的很简单&quot;&gt;&lt;/a&gt;linux上跑ss，真的很简单&lt;/h3&gt;&lt;h4 id=&quot;第一步先装docker-C
      
    
    </summary>
    
      <category term="linux" scheme="https://jaychoubaby.github.io/categories/linux/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="linux" scheme="https://jaychoubaby.github.io/tags/linux/"/>
    
      <category term="docker" scheme="https://jaychoubaby.github.io/tags/docker/"/>
    
      <category term="Shadowsocks" scheme="https://jaychoubaby.github.io/tags/Shadowsocks/"/>
    
      <category term="ss" scheme="https://jaychoubaby.github.io/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>Mac常用软件收藏</title>
    <link href="https://jaychoubaby.github.io/2019/01/25/Mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%94%B6%E8%97%8F/"/>
    <id>https://jaychoubaby.github.io/2019/01/25/Mac常用软件收藏/</id>
    <published>2019-01-25T09:12:50.000Z</published>
    <updated>2019-03-25T01:57:09.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件收藏"><a href="#软件收藏" class="headerlink" title="软件收藏"></a>软件收藏</h3><ol><li><a href="https://xclient.info/" target="_blank" rel="noopener">xclient</a> | 常用软件都有，个别因为版权问题下架，所有安装包解压需要密码 <code>xclient.info</code></li><li><a href="https://www.waitsun.com/" target="_blank" rel="noopener">爱情守望者</a> | 差不多，安装包没有密码</li><li><a href="http://www.sdifen.com/" target="_blank" rel="noopener">史蒂芬周的博客</a> | 一个博客，居然还收费下载，有的也免费，随便看看还行，主要用来看软件更新日志</li><li><a href="http://mac-torrent-download.net/" target="_blank" rel="noopener">mac-torrent-download</a> | 神站不解释，不过广告超多，而且都是强制广告，需翻墙</li><li><a href="https://greasyfork.org/zh-CN/scripts" target="_blank" rel="noopener">油猴脚本</a> | 油猴的脚本站</li><li><a href="http://msdn.itellyou.cn/" target="_blank" rel="noopener">MSDN</a> | 可以下载到纯净的系统安装包</li><li><a href="https://support.apple.com/zh-cn/HT208079" target="_blank" rel="noopener">旧版iTunes</a> | 可以下载最后一个支持下载安装包的iTunes</li><li><a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">Homebrew</a> | macOS 缺失的软件包的管理器</li><li><a href="https://www.freedownloadmanager.org/" target="_blank" rel="noopener">freedownloadmanager</a> | 一个全平台的下载器（顶替迅雷）</li><li><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">idea.lanyus</a> | 破解idea专用</li><li><a href="https://www.cnblogs.com/zqr99/p/8708069.html" target="_blank" rel="noopener">idea 2018.1破解激活方法,有效期至2099年</a> | 目前有效</li><li><a href="http://www.sequelpro.com/" target="_blank" rel="noopener">sequelpro</a> | mac上一个mysql图形化界面工具，超喜欢，可惜不更新了</li><li><a href="https://iina.io/" target="_blank" rel="noopener">IINA</a> | Mac上一个开源播放器，超好用</li><li><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a> | 全平台图床工具</li><li><a href="https://github.com/Caldis/Mos" target="_blank" rel="noopener">Mos</a> | 一个用于在 MacOS 上平滑你的鼠标滚动效果或单独设置滚动方向的小工具, 让你的滚轮爽如触控板</li><li><a href="https://github.com/trazyn/ieaseMusic" target="_blank" rel="noopener">ieaseMusic</a> | Mac上开源的网易云播放器，界面不错</li><li><a href="https://github.com/alanzhangzm/Photon" target="_blank" rel="noopener">Photon</a> | 基于aria2的轻量级多线程下载器。</li><li><a href="https://lai.yuweining.cn/archives/1757/" target="_blank" rel="noopener">迅雷 U 享版</a> | 迅雷 U 享版</li><li><a href="http://irreader.netqon.com/" target="_blank" rel="noopener">irreader</a>  | 订阅网页、RSS和Podcast，具备急速的阅读体验，高品质、免费、无广告、多平台的RSS阅读器。 </li><li><a href="https://glaciericons.com/" target="_blank" rel="noopener">Glacier</a> | 展示macos图标</li><li><a href="https://github.com/idealclover/Easy-to-RSS" target="_blank" rel="noopener">Easy-to-RSS</a> | 功能：获取网页RSS，复制到剪贴板并打开该RSS网页</li><li><a href="https://github.com/kyleneideck/BackgroundMusic" target="_blank" rel="noopener">Background Music</a> | mac上可以单独调节各种音量大小的软件</li></ol><h3 id="壁纸网站"><a href="#壁纸网站" class="headerlink" title="壁纸网站"></a>壁纸网站</h3><ol><li><a href="https://interfacelift.com/wallpaper/downloads/date/any/" target="_blank" rel="noopener">https://interfacelift.com/wallpaper/downloads/date/any/</a> | 质量高，更新慢</li><li><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a> | 质量中等，更新较快</li><li><a href="https://alpha.wallhaven.cc/random?page=2" target="_blank" rel="noopener">https://alpha.wallhaven.cc/random?page=2</a></li><li><a href="https://wallions.com/search" target="_blank" rel="noopener">https://wallions.com/search</a></li><li><a href="https://www.lifeofpix.com/" target="_blank" rel="noopener">https://www.lifeofpix.com/</a></li><li><a href="https://visualhunt.com/" target="_blank" rel="noopener">https://visualhunt.com/</a></li><li><a href="https://wallions.com/search/mountain" target="_blank" rel="noopener">https://wallions.com/search/mountain</a></li><li><a href="http://streetwill.co/" target="_blank" rel="noopener">http://streetwill.co/</a></li><li><a href="https://unsplash.com/@joshshutler?utm_source=osx&amp;utm_medium=menuItem&amp;utm_campaign=wallcat" target="_blank" rel="noopener">https://unsplash.com/@joshshutler?utm_source=osx&amp;utm_medium=menuItem&amp;utm_campaign=wallcat</a></li><li><a href="https://lai.yuweining.cn/archives/575/" target="_blank" rel="noopener">https://lai.yuweining.cn/archives/575/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;软件收藏&quot;&gt;&lt;a href=&quot;#软件收藏&quot; class=&quot;headerlink&quot; title=&quot;软件收藏&quot;&gt;&lt;/a&gt;软件收藏&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://xclient.info/&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
      <category term="MacBook" scheme="https://jaychoubaby.github.io/categories/MacBook/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="MacBook" scheme="https://jaychoubaby.github.io/tags/MacBook/"/>
    
      <category term="收藏" scheme="https://jaychoubaby.github.io/tags/%E6%94%B6%E8%97%8F/"/>
    
      <category term="软件" scheme="https://jaychoubaby.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>MacBook Pro休眠掉电问题</title>
    <link href="https://jaychoubaby.github.io/2019/01/25/MacBook%20Pro%E4%BC%91%E7%9C%A0%E6%8E%89%E7%94%B5%E9%97%AE%E9%A2%98/"/>
    <id>https://jaychoubaby.github.io/2019/01/25/MacBook Pro休眠掉电问题/</id>
    <published>2019-01-25T09:09:50.000Z</published>
    <updated>2019-03-25T01:57:09.728Z</updated>
    
    <content type="html"><![CDATA[<ol><li>重启 <strong>Macbook</strong>，在启动的时候按住 <code>command + R</code>，然后系统会尽入 <strong>recovery</strong> 模式。</li><li>选择语言，点下一步，然后在菜单栏选择打开 <strong>terminal</strong>。</li><li>输入 <code>csrutil disable</code> 禁掉 <strong>SIP</strong>，然后正常重启 <strong>macbook</strong>。</li><li>打开 <strong>terminal</strong>，输入 <code>ioreg -l | grep board-id</code> 查看你的 <strong>board-id</strong>，</li><li>在这个目录 <code>/System/Library/Extensions/IOPlatformPluginFamily.kext/Contents/PlugIns/X86PlatformPlugin.kext/Contents/Resources</code> 下面找到你的 <strong>board-id</strong> 对应的 <strong>.plist</strong> 文件</li><li>用管理员账户编辑上一步中的 <strong>plist</strong> 文件，比如 <code>sudo vim Mac-2BD2C31983FE1634.plist</code></li><li><p>把 <code>TCPKeepAliveDuringSleep</code> 修改为 <code>false</code>, 然后保存</p><pre><code>&lt;key&gt;TCPKeepAliveDuringSleep&lt;/key&gt;&lt;false/&gt;&lt;key&gt;NotificationWake&lt;/key&gt;&lt;false/&gt;&lt;key&gt;DNDWhileDisplaySleeps&lt;/key&gt;&lt;true/&gt;</code></pre></li><li>重启 mac，按照第 1，2 步进入 <strong>recovery</strong> 模式，开启 <code>SIP，csrutil enable</code>。</li><li>正常重启 mac，就可以了。可以用这个命令 <code>ioreg -l | grep IOPlatformFeatureDefaults</code> 来查看修改后的状态。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;重启 &lt;strong&gt;Macbook&lt;/strong&gt;，在启动的时候按住 &lt;code&gt;command + R&lt;/code&gt;，然后系统会尽入 &lt;strong&gt;recovery&lt;/strong&gt; 模式。&lt;/li&gt;
&lt;li&gt;选择语言，点下一步，然后在菜单栏选择打开 &lt;
      
    
    </summary>
    
      <category term="MacBook" scheme="https://jaychoubaby.github.io/categories/MacBook/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="技巧" scheme="https://jaychoubaby.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="MacBook" scheme="https://jaychoubaby.github.io/tags/MacBook/"/>
    
      <category term="电量" scheme="https://jaychoubaby.github.io/tags/%E7%94%B5%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 原生工具进行网页长截图</title>
    <link href="https://jaychoubaby.github.io/2019/01/25/Chrome%20%E5%8E%9F%E7%94%9F%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE/"/>
    <id>https://jaychoubaby.github.io/2019/01/25/Chrome 原生工具进行网页长截图/</id>
    <published>2019-01-25T08:59:50.000Z</published>
    <updated>2019-03-25T01:57:09.727Z</updated>
    
    <content type="html"><![CDATA[<ol><li>首先按下 <code>⌘Command + ⌥Option + I</code>（Windows 为 <code>F12</code>）快捷键，召唤出调试界面。</li></ol><p><img src="https://i.imgur.com/g2zHgGu.png" alt=""></p><ol start="2"><li>随后，按下 <code>⌘Command + ⇧Shift + P</code>（Windows 为 <code>Ctrl + Shift + P</code>），输入命令 <code>Capture full size screenshot</code>（只输前几个字母就能找到），敲下回车，Chrome 就会自动截取整个网页内容并保存至本地。由于是渲染引擎直接输出，其比普通扩展速度更快，分辨率也更高。</li></ol><p><img src="https://i.imgur.com/Eafj6pF.png" alt=""></p><ol start="3"><li>除了普通长截图以外，你还可以利用这一功能截取手机版网页长图。只需要按下 <code>⌘Command + ⇧Shift + M</code> （Windows 为 <code>Ctrl + Shift + M</code>）模拟移动设备，再按刚才的方法运行命令就可以了。在顶部的工具栏中，你可以选择要模拟的设备和分辨率等设置。</li></ol><p><img src="https://i.imgur.com/dXLruUk.png" alt=""></p><p><img src="https://i.imgur.com/jzb9I6F.png" alt=""></p><ol start="4"><li>如果你想准确截取网页的某一部分，可以按下 <code>⌘Command + ⇧Shift + C</code>（Windows 为 <code>Ctrl + Shift + C</code>）嗅探元素。选中想要的部分后，再运行 <code>Capture node screenshot</code> 命令，一张完美的选区截图就诞生了。</li></ol><p><img src="https://i.imgur.com/aefbkdK.png" alt=""></p><p><img src="https://i.imgur.com/R6I3Rgq.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;首先按下 &lt;code&gt;⌘Command + ⌥Option + I&lt;/code&gt;（Windows 为 &lt;code&gt;F12&lt;/code&gt;）快捷键，召唤出调试界面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/g2zHgG
      
    
    </summary>
    
      <category term="技巧" scheme="https://jaychoubaby.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Chrome" scheme="https://jaychoubaby.github.io/tags/Chrome/"/>
    
      <category term="技巧" scheme="https://jaychoubaby.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="截图" scheme="https://jaychoubaby.github.io/tags/%E6%88%AA%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 最常用的几个命令</title>
    <link href="https://jaychoubaby.github.io/2019/01/25/Hexo%20%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%91%BD%E4%BB%A4/"/>
    <id>https://jaychoubaby.github.io/2019/01/25/Hexo 最常用的几个命令/</id>
    <published>2019-01-25T08:25:50.000Z</published>
    <updated>2019-03-25T01:57:09.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo-约有二十个命令，但普通用户经常使用的大概只有下列几个"><a href="#Hexo-约有二十个命令，但普通用户经常使用的大概只有下列几个" class="headerlink" title="Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:"></a>Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:</h3><h4 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h4><pre><code>hexo s</code></pre><p>启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>hexo s 是 hexo server 的缩写，命令效果一致；<br>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；<br>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</p><h4 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h4><pre><code>hexo new &quot;学习笔记  六&quot;</code></pre><p>新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。</p><p>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。</p><h4 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h4><pre><code>hexo d</code></pre><p>自动生成网站静态文件，并部署到设定的仓库。</p><p>hexo d 是 hexo deploy 的缩写，命令效果一致。</p><h4 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h4><pre><code>hexo clean</code></pre><p>清除缓存文件 db.json 和已生成的静态文件 public 。</p><p>网站显示异常时可以执行这条命令试试。</p><h4 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h4><pre><code>hexo g</code></pre><p>生成网站静态文件到默认设置的 public 文件夹。</p><p>便于查看网站生成的静态文件或者手动部署网站；<br>如果使用自动部署，不需要先执行该命令；<br>hexo g 是 hexo generate 的缩写，命令效果一致。</p><h4 id="hexo-new-page"><a href="#hexo-new-page" class="headerlink" title="hexo new page"></a>hexo new page</h4><pre><code>hexo new page aboutme</code></pre><p>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/</p><p>标题可以为中文，但一般习惯用英文；<br>页面标题和文章一样可以随意修改；<br>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</p><h4 id="md文章格式"><a href="#md文章格式" class="headerlink" title="md文章格式"></a>md文章格式</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="string">最常用的几个命令</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-01</span><span class="bullet">-25</span> <span class="number">16</span><span class="string">:25:50</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[随笔,Hexo,学习,命令]</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hexo-约有二十个命令，但普通用户经常使用的大概只有下列几个&quot;&gt;&lt;a href=&quot;#Hexo-约有二十个命令，但普通用户经常使用的大概只有下列几个&quot; class=&quot;headerlink&quot; title=&quot;Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几
      
    
    </summary>
    
      <category term="Hexo" scheme="https://jaychoubaby.github.io/categories/Hexo/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Hexo" scheme="https://jaychoubaby.github.io/tags/Hexo/"/>
    
      <category term="学习" scheme="https://jaychoubaby.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="命令" scheme="https://jaychoubaby.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://jaychoubaby.github.io/2019/01/24/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://jaychoubaby.github.io/2019/01/24/Linux常用命令/</id>
    <published>2019-01-24T01:31:50.000Z</published>
    <updated>2019-03-25T01:57:09.727Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/IAxXwcu.jpg" alt=""></p><a id="more"></a><h2 id="linux命令很多，但是常用的也就那么多，记录一些liunx常用的命令"><a href="#linux命令很多，但是常用的也就那么多，记录一些liunx常用的命令" class="headerlink" title="linux命令很多，但是常用的也就那么多，记录一些liunx常用的命令"></a>linux命令很多，但是常用的也就那么多，记录一些liunx常用的命令</h2><h3 id="tab"><a href="#tab" class="headerlink" title="tab"></a>tab</h3><blockquote><p><code>tab</code>不是命令，是键盘上的tab键，这个虽然不是命令但是很重要，可以帮你补全文件信息和路径信息，减少手打产生的错误，例如你要进入到<code>/usr/local</code>,你使用<code>cd /u</code>然后按tab就会自动帮你打出<code>cd /usr</code>,如果你不知道/usr目录下有哪些文件夹，你可以连续按两次tab，就会在保留当前<code>cd /usr</code>的命令下并显示出/usr下的文件</p></blockquote><p><img src="https://i.imgur.com/im6uLZQ.png" alt=""></p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><blockquote><p>进入文件夹，比如 <code>cd /home</code> , <code>cd /usr/data</code></p></blockquote><blockquote><p><code>cd ..</code> 的意思是返回上一级</p></blockquote><blockquote><p><code>cd ./path</code>  切换到当前目录下的path目录中，“.”表示当前目录</p></blockquote><blockquote><p><code>cd ../path</code>  切换到上层目录中的path目录中，“..”表示上一层目录</p></blockquote><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><blockquote><p>查看当前目录路径</p></blockquote><p><img src="https://i.imgur.com/YqWZcyF.png" alt=""></p><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><blockquote><p>查看当前目录下的所有文件</p></blockquote><p><img src="https://i.imgur.com/KGPS25C.png" alt=""></p><h3 id="ll"><a href="#ll" class="headerlink" title="ll"></a>ll</h3><blockquote><p>也是查看当前目录下所有文件，不过这个显示每个文件的详情</p></blockquote><p><img src="https://i.imgur.com/gK0nQUk.png" alt=""></p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><blockquote><p>复制命令，例如：<code>cp test.txt test1.txt</code> 复制<strong>test.txt</strong>文件为<strong>test1.txt</strong></p></blockquote><p><img src="https://i.imgur.com/b38YkTZ.png" alt=""></p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><blockquote><p>新建文件夹命令，例：<code>mkdir 111</code></p></blockquote><p><img src="https://i.imgur.com/mKJGtWf.png" alt=""></p><h3 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi,vim"></a>vi,vim</h3><blockquote><p><code>vi</code> 是linux自带的文本编辑命令，<code>vim</code>是<code>vi</code>的升级版，<code>vim</code>命令需要安装才有，可以使用这两个命令编辑文本，例如：<code>vi test.txt</code></p></blockquote><p><img src="https://i.imgur.com/aNwxHYF.png" alt=""></p><blockquote><p>就会进入文本编辑模式，但是这个时候你是没法编辑的，如果你要开始编辑你需要先输入字母 <code>a</code> 激活编辑模式。</p></blockquote><p><img src="https://i.imgur.com/e98atZo.png" alt=""></p><blockquote><p>下面有<code>INSERT</code>字样提示你可以编辑</p></blockquote><p><img src="https://i.imgur.com/yRNKvq5.png" alt=""></p><blockquote><p>当你编辑完成后可以按 <code>Esc</code> 退出编辑模式<br>如果你要保存你需要直接输入 <code>:wq</code> 并回车,如果放弃保存 直接输入 <code>:q</code> 并回车</p></blockquote><p><img src="https://i.imgur.com/TtLS07O.png" alt=""></p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><blockquote><p>预览模式查看文件，例：<code>cat test.txt</code> ,直接显示文本内信息，但是不能编辑</p></blockquote><p><img src="https://i.imgur.com/lQqgemh.png" alt=""></p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><blockquote><p>移动命令，将文件已到另一个文件夹，例：<code>mv test.txt /home/data/111/</code></p></blockquote><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><blockquote><p>删除命令，慎用，linux没有回收站功能，删除之前要看仔细了再操作，例如 <code>rm test.txt</code></p></blockquote><p><img src="https://i.imgur.com/zK72BEc.png" alt=""></p><blockquote><p>删除文件夹和文件夹内的文件需要用 <code>rm -rf</code></p></blockquote><p><img src="https://i.imgur.com/ecTEn4x.png" alt=""></p><h3 id="ps-ef"><a href="#ps-ef" class="headerlink" title="ps -ef"></a>ps -ef</h3><blockquote><p><code>ps -ef</code>是查看进程的命令，通常需要搭配 <code>grep</code> 一起用，例如查看当前服务器上java进程，<code>ps -ef|grep java</code></p></blockquote><p><img src="https://i.imgur.com/RNJJWns.png" alt=""></p><blockquote><p>就会显示所有的java进程，每个进程的执行目录也有，如果你想找一台服务器上的某个服务文件路径，就可以使用这个命令查看之后找到路径</p></blockquote><h3 id="netstat-tunlp"><a href="#netstat-tunlp" class="headerlink" title="netstat -tunlp"></a>netstat -tunlp</h3><blockquote><p>和<code>ps -ef</code>差不多的一个命令，也是查进程的，但是查出来的比较简洁，例如 <code>netstat -tunlp | grep java</code></p></blockquote><p><img src="https://i.imgur.com/6KS04NL.png" alt=""></p><h3 id="kill-9"><a href="#kill-9" class="headerlink" title="kill -9"></a>kill -9</h3><blockquote><p>结束某个进程，结束一个进程你需要知道进程的<code>pid</code>，用<code>ps -ef</code>和<code>netstat -tunlp</code>都可以看到进程的pid，例如关闭一个进程：<code>kill -9 1162</code></p></blockquote><blockquote><p>linux命令都不难，常用的几个记住就行，最主要是要多敲，熟能生巧而已，还有些其他命令比如解压缩打包或者启动服务的命令，具体要看你是什么格式的压缩包和什么样的服务，不同的服务启动命令不一样，具体情况具体看就好</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/IAxXwcu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://jaychoubaby.github.io/categories/linux/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="学习" scheme="https://jaychoubaby.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="命令" scheme="https://jaychoubaby.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="linux" scheme="https://jaychoubaby.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>vscode Intergrated Teiminal 集成终端</title>
    <link href="https://jaychoubaby.github.io/2019/01/23/vscode%E9%85%8D%E7%BD%AE%E7%B1%BB%E4%BC%BClinux%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>https://jaychoubaby.github.io/2019/01/23/vscode配置类似linux命令行/</id>
    <published>2019-01-23T09:23:50.000Z</published>
    <updated>2019-03-25T01:57:09.729Z</updated>
    
    <content type="html"><![CDATA[<p>windows没有<code>ls</code>,<code>pwd</code>等类似linux的命令，着实不方便，虽然有<code>mkdir</code>，但是用习惯了linux会觉得很奇怪，强大的vscode居然有这种插件可以解决，记一下安装方法：</p><p>环境：windows7</p><ol><li>设置-搜索 <code>terminal.integrated.shellArgs.osx</code></li><li><p><strong>工作区设置</strong>或<strong>用户设置</strong>配置</p><pre><code>{    &quot;terminal.integrated.shell.windows&quot;: &quot;C:/Program Files/Git/bin/bash.exe&quot;,    &quot;explorer.confirmDelete&quot;: false}</code></pre></li><li><p>保存会提示重启，<code>ctrl</code> + <code>shift</code> + <code>~</code> 启动终端面板</p></li></ol><p><img src="https://i.imgur.com/1jQBzWt.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;windows没有&lt;code&gt;ls&lt;/code&gt;,&lt;code&gt;pwd&lt;/code&gt;等类似linux的命令，着实不方便，虽然有&lt;code&gt;mkdir&lt;/code&gt;，但是用习惯了linux会觉得很奇怪，强大的vscode居然有这种插件可以解决，记一下安装方法：&lt;/p&gt;
&lt;p&gt;环
      
    
    </summary>
    
      <category term="vscode" scheme="https://jaychoubaby.github.io/categories/vscode/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="linux" scheme="https://jaychoubaby.github.io/tags/linux/"/>
    
      <category term="vscode" scheme="https://jaychoubaby.github.io/tags/vscode/"/>
    
      <category term="配置" scheme="https://jaychoubaby.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>ss的一些配置和命令</title>
    <link href="https://jaychoubaby.github.io/2019/01/23/ss%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
    <id>https://jaychoubaby.github.io/2019/01/23/ss的一些配置和命令/</id>
    <published>2019-01-23T09:14:50.000Z</published>
    <updated>2019-03-25T01:57:09.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ss命令"><a href="#ss命令" class="headerlink" title="ss命令"></a>ss命令</h2><p>后台运行：<code>ssserver -c /etc/shadowsocks.json -d start</code></p><p>后台停止：<code>ssserver -c /etc/shadowsocks.json -d stop</code></p><p>前台运行：<code>ssserver -c /etc/shadowsocks/config.json</code></p><p>修改配置：</p><pre><code>vi /etc/shadowsocks.json</code></pre><p>SSR:</p><p>管理界面：<code>bash ssr.sh</code></p><p>锐速命令：</p><p>启动：</p><pre><code>service serverSpeeder start</code></pre><p>关闭：</p><pre><code>service serverSpeeder stop</code></pre><p>状态：</p><pre><code>service serverSpeeder status</code></pre><p>开启防火墙端口：</p><h3 id="端口号是你自己设置的端口"><a href="#端口号是你自己设置的端口" class="headerlink" title="端口号是你自己设置的端口"></a>端口号是你自己设置的端口</h3><pre><code>$ firewall-cmd --permanent --zone=public --add-port=443/tcp$ firewall-cmd --reload</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ss命令&quot;&gt;&lt;a href=&quot;#ss命令&quot; class=&quot;headerlink&quot; title=&quot;ss命令&quot;&gt;&lt;/a&gt;ss命令&lt;/h2&gt;&lt;p&gt;后台运行：&lt;code&gt;ssserver -c /etc/shadowsocks.json -d start&lt;/code&gt;&lt;/
      
    
    </summary>
    
      <category term="ss" scheme="https://jaychoubaby.github.io/categories/ss/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="linux" scheme="https://jaychoubaby.github.io/tags/linux/"/>
    
      <category term="ss" scheme="https://jaychoubaby.github.io/tags/ss/"/>
    
      <category term="配置" scheme="https://jaychoubaby.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="shadowsocks" scheme="https://jaychoubaby.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>hexo加上动态看板娘</title>
    <link href="https://jaychoubaby.github.io/2019/01/23/hexo%20%E6%B7%BB%E5%8A%A0live2d%E7%9C%8B%E6%9D%BF%E5%8A%A8%E7%94%BB/"/>
    <id>https://jaychoubaby.github.io/2019/01/23/hexo 添加live2d看板动画/</id>
    <published>2019-01-23T06:48:50.000Z</published>
    <updated>2019-03-25T01:57:09.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-添加live2d看板动画"><a href="#hexo-添加live2d看板动画" class="headerlink" title="hexo 添加live2d看板动画"></a>hexo 添加live2d看板动画</h2><h3 id="首先贴出官网代码"><a href="#首先贴出官网代码" class="headerlink" title="首先贴出官网代码"></a>首先贴出官网代码</h3><p>官网地址配置：<a href="https://www.npmjs.com/package/hexo-helper-live2d" target="_blank" rel="noopener">https://www.npmjs.com/package/hexo-helper-live2d</a></p><p><strong>遇到问题：</strong></p><ol><li>替换主题，在项目跟目录创建文件夹<code>live2d_models</code>,在<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">这里选择你喜欢的妹子</a> 然后去<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">这里</a>找到对应的安装包文件名，先贴一下免得下次找：</li></ol><p>安装插件：<code>npm install --save hexo-helper-live2d</code></p><ul><li></li><li>live2d-widget-model-chitose</li><li>live2d-widget-model-epsilon2_1</li><li>live2d-widget-model-gf</li><li>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)</li><li>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)</li><li>live2d-widget-model-haruto</li><li>live2d-widget-model-hibiki</li><li>live2d-widget-model-hijiki</li><li>live2d-widget-model-izumi</li><li>live2d-widget-model-koharu</li><li>live2d-widget-model-miku</li><li>live2d-widget-model-ni-j</li><li>live2d-widget-model-nico</li><li>live2d-widget-model-nietzsche</li><li>live2d-widget-model-nipsilon</li><li>live2d-widget-model-nito</li><li>live2d-widget-model-shizuku</li><li>live2d-widget-model-tororo</li><li>live2d-widget-model-tsumiki</li><li>live2d-widget-model-unitychan</li><li>live2d-widget-model-wanko</li><li>live2d-widget-model-z16</li></ul><p>安装主题：<code>npm install live2d-widget-model-chitose</code></p><p>在主题_config.yml的参数配置贴一下：</p><pre><code># Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d:  enable: true  # enable: false  scriptFrom: local # 默认  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径  pluginModelPath: assets/ # 模型文件相对与插件根目录路径  # scriptFrom: jsdelivr # jsdelivr CDN  # scriptFrom: unpkg # unpkg CDN  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中  debug: false # 调试, 是否在控制台输出日志  model:    use: live2d-widget-model-haruto # npm-module package name    # use: wanko # 博客根目录/live2d_models/ 下的目录名    # use: ./wives/wanko # 相对于博客根目录的路径    # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url  display:    superSample: 2    width: 100    height: 150    position: right    hOffset: 0    vOffset: -0  mobile:    show: true    scale: 0.1 </code></pre><p>Epsilon2.1</p><p><img src="https://i.imgur.com/tnhhNFn.gif" alt=""></p><p>Gantzert_Felixander</p><p><img src="https://i.imgur.com/tAWkZkc.gif" alt=""></p><p>haru</p><p><img src="https://i.imgur.com/c3M1wh2.gif" alt=""></p><p>miku</p><p><img src="https://i.imgur.com/Z9ORJcM.gif" alt=""></p><p>ni-j</p><p><img src="https://i.imgur.com/m9VPcu4.gif" alt=""></p><p>nico</p><p><img src="https://i.imgur.com/dLmYJXr.gif" alt=""></p><p>nietzche</p><p><img src="https://i.imgur.com/zfYK5D5.gif" alt=""></p><p>nipsilon</p><p><img src="https://i.imgur.com/aHDbqYT.gif" alt=""></p><p>nito</p><p><img src="https://i.imgur.com/CK2uT0g.gif" alt=""></p><p>shizuku</p><p><img src="https://i.imgur.com/Ge2aFIZ.gif" alt=""></p><p>tsumiki</p><p><img src="https://i.imgur.com/UkUDg9A.gif" alt=""></p><p>wanko</p><p><img src="https://i.imgur.com/HCoMIfN.gif" alt=""></p><p>z16</p><p><img src="https://i.imgur.com/F7Pwuzu.gif" alt=""></p><p>hibiki</p><p><img src="https://i.imgur.com/tcv40Sd.gif" alt=""></p><p>koharu</p><p><img src="https://i.imgur.com/anA7CIv.gif" alt=""></p><p>haruto</p><p><img src="https://i.imgur.com/BCqq1H5.gif" alt=""></p><p>Unitychan</p><p><img src="https://i.imgur.com/5rEdvl1.gif" alt=""></p><p>tororo</p><p><img src="https://i.imgur.com/BRsaRvE.gif" alt=""></p><p>hijiki</p><p><img src="https://i.imgur.com/QdnqlMy.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hexo-添加live2d看板动画&quot;&gt;&lt;a href=&quot;#hexo-添加live2d看板动画&quot; class=&quot;headerlink&quot; title=&quot;hexo 添加live2d看板动画&quot;&gt;&lt;/a&gt;hexo 添加live2d看板动画&lt;/h2&gt;&lt;h3 id=&quot;首先贴出官
      
    
    </summary>
    
      <category term="blog" scheme="https://jaychoubaby.github.io/categories/blog/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="博客" scheme="https://jaychoubaby.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="https://jaychoubaby.github.io/tags/hexo/"/>
    
      <category term="学习" scheme="https://jaychoubaby.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>记录搭建博客遇到的一些问题</title>
    <link href="https://jaychoubaby.github.io/2019/01/22/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://jaychoubaby.github.io/2019/01/22/记录搭建博客遇到的问题/</id>
    <published>2019-01-22T08:29:50.000Z</published>
    <updated>2019-03-25T01:57:09.729Z</updated>
    
    <content type="html"><![CDATA[<ol><li>git和hexo两者的git处理方式不一样，通过hexo提交的话不会提交源码只会提交编译后的html，所以一旦源码丢失那就gg了</li><li>hexo环境的搭建，这个自己百度，很简单</li><li>我喜欢的next主题配置，参见：<a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">https://www.jianshu.com/p/9f0e90cc32c2</a></li><li><a href="http://jekyllthemes.org/page4/" title="jekyll模板" target="_blank" rel="noopener">jekyl</a>l博客也是很不错的，可以直接上传markdown文件生成文章，相对hexo来说是要方便一点，但是犹豫hexo的驱动比较牛逼，我比较喜欢炫酷的效果所以还是选择了hexo</li><li>评论系统采用的是Valine，gitment有bug，经常js报错很难受，gitalk也是,Disqus需要翻墙，相对来说<a href="https://leancloud.cn/" target="_blank" rel="noopener">Valine</a>最合适，不需要登录就可以评论</li></ol><p>好了就写这么多，搭建的过程虽然网上有很多教程，但是还是会遇到一些npm node 之类的错误，自己还是要多查多思考，也没那么难</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;git和hexo两者的git处理方式不一样，通过hexo提交的话不会提交源码只会提交编译后的html，所以一旦源码丢失那就gg了&lt;/li&gt;
&lt;li&gt;hexo环境的搭建，这个自己百度，很简单&lt;/li&gt;
&lt;li&gt;我喜欢的next主题配置，参见：&lt;a href=&quot;ht
      
    
    </summary>
    
      <category term="blog" scheme="https://jaychoubaby.github.io/categories/blog/"/>
    
    
      <category term="随笔" scheme="https://jaychoubaby.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="博客" scheme="https://jaychoubaby.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="https://jaychoubaby.github.io/tags/hexo/"/>
    
      <category term="学习" scheme="https://jaychoubaby.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
