<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>redis设计键让其映射到同一个slot</title>
      <link href="/2020/06/28/redis%E8%AE%BE%E8%AE%A1%E9%94%AE%E8%AE%A9%E5%85%B6%E6%98%A0%E5%B0%84%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AAslot/"/>
      <url>/2020/06/28/redis%E8%AE%BE%E8%AE%A1%E9%94%AE%E8%AE%A9%E5%85%B6%E6%98%A0%E5%B0%84%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AAslot/</url>
      
        <content type="html"><![CDATA[<h3 id="redis设计键让其映射到同一个slot"><a href="#redis设计键让其映射到同一个slot" class="headerlink" title="redis设计键让其映射到同一个slot"></a>redis设计键让其映射到同一个slot</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">jedisCluster.sadd(<span class="string">"&#123;jay&#125;aaa"</span>,<span class="string">"71"</span>,<span class="string">"73"</span>);</span><br><span class="line">jedisCluster.sadd(<span class="string">"&#123;jay&#125;bbb"</span>,<span class="string">"72"</span>,<span class="string">"73"</span>);</span><br><span class="line">Set&lt;String&gt; set = jedisCluster.sinter(<span class="string">"&#123;jay&#125;qqqq"</span>,<span class="string">"&#123;jay&#125;ssss"</span>);</span><br><span class="line">System.out.println(JedisClusterCRC16.getSlot(<span class="string">"&#123;jay&#125;qqqq"</span>));</span><br><span class="line">System.out.println(JedisClusterCRC16.getSlot(<span class="string">"&#123;jay&#125;ssss"</span>));</span><br></pre></td></tr></table></figure><h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><p>redis在使用hash算法将键映射到slot时，只会计算{}里面的内容，若{}内的内容相同，则将键映射到同一个slot</p><pre><code>例子中{}内容均为materialType，这样在JedisClusterCRC16.getSlot(key）时得到相同的slot编码号。 这样就可以使用jedisCluster.sinter（key1,key2）方法取交集，避免了键在不同的slot时，该方法报错</code></pre><p><u>起因： 批量删除redis key时如果key不在同一个solt内，会报错</u></p><p><img src="/2020/06/28/redis设计键让其映射到同一个slot/1593336286579.png" alt="1593336286579"></p><p><img src="/2020/06/28/redis设计键让其映射到同一个slot/1593336255437.png" alt="1593336255437"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Cloudflare中转V2Ray流量</title>
      <link href="/2019/06/12/%E4%BD%BF%E7%94%A8Cloudflare%E4%B8%AD%E8%BD%ACV2Ray%E6%B5%81%E9%87%8F/"/>
      <url>/2019/06/12/%E4%BD%BF%E7%94%A8Cloudflare%E4%B8%AD%E8%BD%ACV2Ray%E6%B5%81%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>担心 IP 被墙？或者不想 IP 被墙？是的！使用 Cloudflare 来中转 V2Ray 的 WebSocket 流量就行！由于使用了 Cloudflare 中转，所以墙根本不知道背后的 IP 是多少，你可以愉快的玩耍了~</p><h2 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h2><p>如果你不是使用 移动宽带 的用户，那么使用 Cloudflare 中转的速度相对来说是比较慢的，这个是因为线路的问题，无解。<br><strong>警告警告警告</strong><br><strong>该教程目前写得比较简陋，以后应该会增加详细图文教程</strong><br><strong>V2Ray 的 WS + TLS 不是神话，如果你没学会走路就不要急着跑</strong><br><strong>大佬。。。你如果是从来没接触过 V2Ray 的人一上来就开玩 WS + TLS</strong><br><strong>你真的不怕摔跤吗</strong><br><strong>你有解析过域名吗，知道什么是 A 记录吗，会修改 NS 吗。。</strong><br><strong>如果不懂，那就先补上这些知识再往下看</strong><br><strong>如果实在想玩 WS + TLS，请认认真真看教程</strong><br><strong>教程真的写得比较简陋，如果实在折腾不成功，那也很正常的，改天再来</strong><br><strong>或者直接放弃</strong></p><h2 id="这是一个提示"><a href="#这是一个提示" class="headerlink" title="这是一个提示"></a>这是一个提示</h2><p>真是无聊，折腾啥啊。<a href="https://affping.com/to/bwgjms/post/how-to-buy-justmysocks/" target="_blank" rel="noopener">买个搬瓦工 Just My Socks 先凑合用着就可以了</a>，<strong>被墙自动换 IP，无须担心 IP 被墙！</strong><br>其他的等风声过了再说了，套什么 CF，速度慢到怀疑人生。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>一个域名，建议使用<a href="https://my.freenom.com/clientarea.php?action=domains" target="_blank" rel="noopener">免费域名</a><br>确保域名已经可以在 Cloudflare 正常使用。<br><strong>在 Cloudflare 的 Overview 选项卡可以查看域名状态，请确保为激活状态，即是： Status: Active</strong><br>怎么 SSH 连接上被墙的 IP ? Xshell 在属性那里可以设置代理，或者你可以在一台没有被墙的境外 VPS 使用 iptables 转发数据到被墙的机器上，此处不细说了。</p><h2 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h2><p>在 DNS 选项卡那边添加一个 A 记录的域名解析，假设你的域名是 233blog.com，并且想要使用 <a href="http://www.233blog.com" target="_blank" rel="noopener">www.233blog.com</a> 作为翻墙的域名<br>那么在 DNS 那里配置，Name 写 www，IPv4 address 写你的 VPS IP，<strong>务必把云朵点灰</strong>，然后选择 Add Record 来添加解析记录即可<br>(如果你已经添加域名解析，<strong>请务必把云朵点灰</strong>，即是 DNS only)</p><p>OK，确保操作没有问题的话，继续</p><h2 id="安装-V2Ray"><a href="#安装-V2Ray" class="headerlink" title="安装 V2Ray"></a>安装 V2Ray</h2><blockquote><p>如果你已经使用本人提供的 V2Ray 一键安装脚本并安装了 V2Ray，那就直接输入 <code>v2ray config</code>修改传输协议为 WebSocket + TLS</p></blockquote><p>如果你并没有使用本站提供的 V2Ray 一键安装脚本来安装 V2Ray<br>那么现在开始使用吧，最好用的 V2Ray 安装脚本，保证你满意<br>使用 root 用户输入下面命令安装或卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure><blockquote><p>如果提示 curl: command not found ，那是因为你的小鸡没装 Curl<br>ubuntu/debian 系统安装 Curl 方法: <code>apt-get update -y &amp;&amp; apt-get install curl -y</code><br>centos 系统安装 Curl 方法: <code>yum update -y &amp;&amp; yum install curl -y</code><br>安装好 curl 之后就能安装脚本了</p></blockquote><p>之后选择安装，传输协议选择 WebSocket + TLS (即是选择 4 )，V2Ray 端口随便，不要是 80 和 443 即可，<strong>然后输入你的域名，域名解析 Y ，自动配置 TLS 也是 Y</strong> ，其他就默认吧，一路回车。等待安装完成<br>如果你的域名没有正确解析，安装会失败，解析相关看上面的 <strong>添加域名解析</strong></p><p>安装完成后会展示 V2Ray 的配置信息，并且会询问是否生成二维码等，不用管它，直接回车</p><p><strong>然后输入 v2ray status 查看一下运行状态，请确保 V2Ray 和 Caddy 都在运行</strong></p><p>如果没有问题的话，继续</p><h2 id="设置-Crypto-和-开启中转"><a href="#设置-Crypto-和-开启中转" class="headerlink" title="设置 Crypto 和 开启中转"></a>设置 Crypto 和 开启中转</h2><p>确保 Cloudflare 的 Crypto 选项卡的 SSL 为 Full<br><strong>并且请确保 SSL 选项卡有显示 Universal SSL Status Active Certificate 这样的字眼，如果你的 SSL 选项卡没有显示这个，不要急，只是在申请证书，24 小时内可以搞定。</strong></p><p><strong>然后在 DNS 选项卡那里，把刚才点灰的那个云朵图标，点亮它，一定要点亮一定要点亮一定要点亮</strong></p><p>云朵图标务必为橙色状态，即是 DNS and HTTP proxy(CDN)</p><h2 id="V2Ray-配置信息"><a href="#V2Ray-配置信息" class="headerlink" title="V2Ray 配置信息"></a>V2Ray 配置信息</h2><p>很好，现在接下来配置客户端使用<br>输入 <code>v2ray info</code> 即可查看 V2Ray 的配置，如果你有使用某些 V2Ray 客户端，可以根据给出的配置的信息来配置使用了。赶紧测试吧</p><blockquote><p>V2Ray 客户端使用教程：<br>Windows<br><a href="https://github.com/233boy/v2ray/wiki/V2RayN%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">V2RayN使用教程</a></p></blockquote><p>什么鬼？对啊，就是如此简单啊，要不然你以为啊。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>如果你的 VPS 位置是在美国西海岸的话，速度应该还算可以吧，如果不是在美国西海岸，那么也许速度会很慢，不过好在不用担心 IP 被墙或者能让被墙的 IP 重生也挺好的。难道不是么？<br>如果你使用移动网络的话，那么 Cloudflare 的中转节点可能会在香港，速度也许会不错 (不完全保证)。</p><h2 id="无限域名备用"><a href="#无限域名备用" class="headerlink" title="无限域名备用"></a>无限域名备用</h2><p>懒得写了，自己悟吧…<br>反正绝大多数人只要知道怎么把墙的 IP 救活就行…<br>算啦，我还是提示一下吧，WebSocket 协议，80 端口，Cloudflare 的 Crypto 选项卡 SSL 为 Flexible<br>如果没有太多必要，不需要折腾这</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>哇，没有图文教程你就看不懂的话，我能怎么办，我也很绝望，我更加迷茫</p><blockquote><p>转自：<a href="https://github.com/233boy/v2ray/wiki/%E4%BD%BF%E7%94%A8Cloudflare%E4%B8%AD%E8%BD%ACV2Ray%E6%B5%81%E9%87%8F" target="_blank" rel="noopener">https://github.com/233boy/v2ray/wiki/%E4%BD%BF%E7%94%A8Cloudflare%E4%B8%AD%E8%BD%ACV2Ray%E6%B5%81%E9%87%8F</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ss </tag>
            
            <tag> v2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V2Ray一键安装脚本</title>
      <link href="/2019/06/12/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/06/12/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>支持 V2Ray 绝大多数传输协议，WebSocket + TLS，HTTP/2，Shadowsocks，动态端口，集成 BBR 和锐速优化等。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>V2Ray 官网：<a href="https://www.v2ray.com/" target="_blank" rel="noopener">https://www.v2ray.com</a></p><p>V2Ray 是一个于 Shadowsocks 之后非常好用的代理软件，但是由于 V2Ray 的配置略复杂，GUI 客户端不完善，所以 V2Ray 并没有像 Shadowsocks 在科学上网人群之中那么流行。<br>不过我想，像我这种小小白萌新，更需要的是一个好用的一键安装脚本……<br>所以，此脚本是为了方便像我这种小小白萌新更加容易去使用 V2Ray，配置 V2Ray。希望对你有帮助 ^_^</p><blockquote><p>如果你是毫无经验的小白，搭建 V2Ray 请看此教程：<a href="https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">V2Ray搭建详细图文教程</a></p></blockquote><h2 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h2><p><strong>特么这个脚本没有挖矿，没有挖矿，没有挖矿。</strong> 我很抱歉……认真的开了个玩笑<br>脚本是开源的，开源地址： <a href="https://github.com/233boy/v2ray" target="_blank" rel="noopener">https://github.com/233boy/v2ray</a></p><h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ol><li>支持 V2Ray 多数传输协议</li><li>支持 WebSocket + TLS / HTTP/2</li><li>支持 动态端口 (WebSocket + TLS，Socks5， HTTP/2 除外)</li><li>支持 屏蔽广告</li><li>支持 配置 Shadowsocks</li><li>支持 下载客户端配置文件 (不用 Xshell 也可以下载)</li><li>客户端配置文件同时支持 SOCKS 和 HTTP</li><li>支持 生成 V2Ray 配置二维码链接 (仅适用部分客户端)</li><li>支持 生成 V2Ray 配置信息链接</li><li>支持 生成 Shadowsocks 配置二维码链接</li><li>支持修改 V2Ray 传输协议</li><li>支持修改 V2Ray 端口</li><li>支持修改 动态端口</li><li>支持修改 用户ID</li><li>支持修改 TLS 域名</li><li>支持修改 Shadowsocks 端口</li><li>支持修改 Shadowsocks 密码</li><li>支持修改 Shadowsocks 加密协议</li><li>自动启用 BBR 优化 (如果内核支持)</li><li>集成可选安装 BBR (by teddysun.com)</li><li>集成可选安装 锐速 (by moeclub.org)</li><li>一键 查看运行状态 / 查看配置信息 / 启动 / 停止 / 重启 / 更新 / 卸载 / 等等…</li><li>人性化向导 &amp; 纯净安装 &amp; 卸载彻底</li></ol><h2 id="安装或卸载"><a href="#安装或卸载" class="headerlink" title="安装或卸载"></a>安装或卸载</h2><blockquote><p>温馨提醒，此脚本默认屏蔽一些不友好的网站！(仅限轮子相关)</p></blockquote><p>要求：Ubuntu 16+ / Debian 8+ / CentOS 7+ 系统<br>推荐使用 Debian 9 系统，脚本会自动启用 BBR 优化。<br>备注：不推荐使用 Debian 8 系统，因为 Caddy 申请证书可能会出现一些莫名其妙的问题<br><strong>强烈推荐使用 搬瓦工VPS，稳定，快速，针对中国线路专门优化，完全无须担心跑路，服务好，30天退款保证。在这里可以找到 搬瓦工 VPS 套餐大全 ，优惠码在这里： 搬瓦工 VPS 优惠码</strong><br>使用 root 用户输入下面命令安装或卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure><blockquote><p>如果提示 curl: command not found ，那是因为你的 VPS 没装 Curl<br>ubuntu/debian 系统安装 Curl 方法: <code>apt-get update -y &amp;&amp; apt-get install curl -y</code><br>centos 系统安装 Curl 方法: <code>yum update -y &amp;&amp; yum install curl -y</code><br>安装好 curl 之后就能安装脚本了</p></blockquote><p>备注：安装完成后，输入 <code>v2ray</code> 即可管理 V2Ray<br>如果提示你的系统不支持此脚本，那么请尝试更换系统</p><p>下面是此脚本的一些截图</p><p>安装选项</p><p><img src="/2019/06/12/V2Ray一键安装脚本/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323463666530352e6a7067.jpg" alt="å®è£ V2Ray"></p><p>配置 Shadowsocks</p><p><img src="/2019/06/12/V2Ray一键安装脚本/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323461643131632e6a7067.jpg" alt="éç½® Shadowsocks"></p><p>安装完成</p><p><img src="/2019/06/12/V2Ray一键安装脚本/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323462626437352e6a7067.jpg" alt="V2Ray å®è£å®æ"></p><p>管理面板</p><p><img src="/2019/06/12/V2Ray一键安装脚本/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323463363036652e6a7067.jpg" alt="V2Ray ç®¡çé¢æ¿"></p><h2 id="Telegram-专用代理"><a href="#Telegram-专用代理" class="headerlink" title="Telegram 专用代理"></a>Telegram 专用代理</h2><p>如果你在使用 Telegram 的话，你可以配置一个 Telegram 的专用代理，这样来，在某些情况下你就不需要再开一个代理软件了。<br>输入 <code>v2ray tg</code> 即可配置 TG 专用代理<br>配置 Telegram MTProto</p><p><img src="/2019/06/12/V2Ray一键安装脚本/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323438656137342e6a7067.jpg" alt="éç½®Telegram MTProto"></p><p>Telegram MTProto 配置信息</p><p><img src="/2019/06/12/V2Ray一键安装脚本/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323438613130662e6a7067.jpg" alt="Telegram MTProto éç½®ä¿¡æ¯"></p><h2 id="快速管理"><a href="#快速管理" class="headerlink" title="快速管理"></a>快速管理</h2><p><code>v2ray info</code> 查看 V2Ray 配置信息<br><code>v2ray config</code> 修改 V2Ray 配置<br><code>v2ray link</code> 生成 V2Ray 配置文件链接<br><code>v2ray infolink</code> 生成 V2Ray 配置信息链接<br><code>v2ray qr</code> 生成 V2Ray 配置二维码链接<br><code>v2ray ss</code> 修改 Shadowsocks 配置<br><code>v2ray ssinfo</code> 查看 Shadowsocks 配置信息<br><code>v2ray ssqr</code> 生成 Shadowsocks 配置二维码链接<br><code>v2ray status</code> 查看 V2Ray 运行状态<br><code>v2ray start</code> 启动 V2Ray<br><code>v2ray stop</code> 停止 V2Ray<br><code>v2ray restart</code> 重启 V2Ray<br><code>v2ray log</code> 查看 V2Ray 运行日志<br><code>v2ray update</code> 更新 V2Ray<br><code>v2ray update.sh</code> 更新 V2Ray 管理脚本<br><code>v2ray uninstall</code> 卸载 V2Ray</p><h2 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h2><p>V2Ray 配置文件路径：/etc/v2ray/config.json<br>Caddy 配置文件路径：/etc/caddy/Caddyfile<br>脚本配置文件路径: /etc/v2ray/233blog_v2ray_backup.conf</p><blockquote><p>警告，请不要修改脚本配置文件，免得出错。。<br>如果你不是有特别的需求，也不要修改 V2Ray 配置文件<br>不过也没事，若你实在想要瞎折腾，出错了的话，你就卸载，然后重装，再出错 ，再卸载，再重装，重复到自己不再想折腾为止。。</p></blockquote><h2 id="WS-TLS-HTTP2"><a href="#WS-TLS-HTTP2" class="headerlink" title="WS+TLS / HTTP2"></a>WS+TLS / HTTP2</h2><p>如果你使用了这两个协议，那么就会使用了脚本自带的 Caddy 集成<br>不管如何，不建议直接去更改 Caddy 的配置：/etc/caddy/Caddyfile<br>如果你需要配置其他网站相关，请将网站的配置文件放到 /etc/caddy/sites 目录下，然后重启 Caddy 进程即可，脚本默认生成的 Caddy 的配置会加载 /etc/caddy/sites 这个目录下的所有配置文件。<br>所以，请将你的网站配置文件放到 /etc/caddy/sites 目录下，完完全全不需要去更改 /etc/caddy/Caddyfile<br>记得重启 Caddy 进程：service caddy restart</p><h2 id="Caddy-插件相关"><a href="#Caddy-插件相关" class="headerlink" title="Caddy 插件相关"></a>Caddy 插件相关</h2><p>本脚本集成了 Caddy，但不集成任何 Caddy 插件，如果你需要安装某些 Caddy 插件，你可以使用官方的 Caddy 安装脚本来一键安装。<br>本人的脚本集成的 Caddy 的安装路径，跟 Caddy 官方的安装脚本是一致的。所以可以直接安装，不会有任何问题</p><p>举个例子，安装包含 http.filebrowser 插件的 Caddy，执行如下命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://getcaddy.com | bash -s personal http.filebrowser</span><br></pre></td></tr></table></figure><p>你可以在 <a href="https://caddyserver.com/download" target="_blank" rel="noopener">https://caddyserver.com/download</a> 找到 Caddy 更多插件和安装命令。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>V2Ray 客户端配置文件 SOCKS 监听端口为 <code>2333</code>， HTTP 监听端口为 <code>6666</code><br>可能某些 V2Ray 客户端的选项或描述略有不同，但事实上，此脚本显示的 V2Ray 配置信息已经足够详细，由于客户端的不同，请对号入座。</p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>为了避免由于不可抗拒的原因所造成本人主动删除脚本，所以建议请将本脚本 Fork 一份<br>备份地址：<a href="https://github.com/233boy/v2ray/fork" target="_blank" rel="noopener"> https://github.com/233boy/v2ray/fork </a><br>安装方法，确保你已经 Fork 了脚本，将 233boy 修改成你的 Github 用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/233boy/v2ray -b master</span><br><span class="line">cd v2ray</span><br><span class="line">chmod +x install.sh</span><br><span class="line">./install.sh local</span><br></pre></td></tr></table></figure><p>如果提示 git 命令不可用，那就自己安装咯，不会安装啊？我也不知道啊。哈哈</p><h2 id="及时更新脚本"><a href="#及时更新脚本" class="headerlink" title="及时更新脚本"></a>及时更新脚本</h2><p>为确保你能愉快使用，请留意使用 <code>v2ray update.sh</code> 命令来更新管理脚本。<br>脚本难免会有 BUG，所以建议有空就检查一下更新情况。</p><blockquote><p>转自：<a href="https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC" target="_blank" rel="noopener">https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ss </tag>
            
            <tag> v2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>女朋友问我怎么实现后端校验验证码</title>
      <link href="/2019/05/09/%E5%A5%B3%E6%9C%8B%E5%8F%8B%E9%97%AE%E6%88%91%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%90%8E%E7%AB%AF%E6%A0%A1%E9%AA%8C%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>/2019/05/09/%E5%A5%B3%E6%9C%8B%E5%8F%8B%E9%97%AE%E6%88%91%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%90%8E%E7%AB%AF%E6%A0%A1%E9%AA%8C%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h5 id="风和日丽的早上开车和女朋友一起上班，说道一些有的没的技术，突然女朋友问我怎么实现后端校验验证码，我之前是看过一点别人写的逻辑，支支吾吾的结果没讲清楚，女朋友说我装逼失败，这怎么能忍，于是奋发图强学校了一下我们公司大佬的逻辑，原来核心就是开源的kaptcha。"><a href="#风和日丽的早上开车和女朋友一起上班，说道一些有的没的技术，突然女朋友问我怎么实现后端校验验证码，我之前是看过一点别人写的逻辑，支支吾吾的结果没讲清楚，女朋友说我装逼失败，这怎么能忍，于是奋发图强学校了一下我们公司大佬的逻辑，原来核心就是开源的kaptcha。" class="headerlink" title="风和日丽的早上开车和女朋友一起上班，说道一些有的没的技术，突然女朋友问我怎么实现后端校验验证码，我之前是看过一点别人写的逻辑，支支吾吾的结果没讲清楚，女朋友说我装逼失败，这怎么能忍，于是奋发图强学校了一下我们公司大佬的逻辑，原来核心就是开源的kaptcha。"></a>风和日丽的早上开车和女朋友一起上班，说道一些有的没的技术，突然女朋友问我怎么实现后端校验验证码，我之前是看过一点别人写的逻辑，支支吾吾的结果没讲清楚，女朋友说我装逼失败，这怎么能忍，于是奋发图强学校了一下我们公司大佬的逻辑，原来核心就是开源的<code>kaptcha</code>。</h5><p>先来一段官方介绍，用来表示这是一篇技术博客：</p><h3 id="Kaptcha-简介"><a href="#Kaptcha-简介" class="headerlink" title="Kaptcha 简介"></a>Kaptcha 简介</h3><p>Kaptcha 是一个非常实用的验证码生成工具，它是基于SimpleCaptcha的开源项目。通过调整Kaptcha配置可以生成各种样式的验证码。</p><p>使用Kaptcha可以方便的配置以下细节：</p><ul><li>验证码的字体</li><li>验证码字体的大小</li><li>验证码字体的字体颜色</li><li>验证码内容的范围</li><li>验证码图片的大小，边框，边框粗细，边框颜色</li><li>验证码的干扰线</li><li>验证码的样式</li></ul><h5 id="好了，正式完了就开始说一下实现思路吧，其实也挺简单"><a href="#好了，正式完了就开始说一下实现思路吧，其实也挺简单" class="headerlink" title="好了，正式完了就开始说一下实现思路吧，其实也挺简单"></a>好了，正式完了就开始说一下实现思路吧，其实也挺简单</h5><ol><li>前端请求后台接口，后台随机生成一个uuid给前端</li></ol><p><img src="/2019/05/09/女朋友问我怎么实现后端校验验证码/1557362747956.png" alt="1557362747956"></p><ol start="2"><li><p>前端拿到uuid之后，通过这个uuid请求后台，后台通过uuid生成一张验证码图片返给前端</p><p><img src="/2019/05/09/女朋友问我怎么实现后端校验验证码/1557362821183.png" alt="1557362821183"></p></li></ol><p><img src="/2019/05/09/女朋友问我怎么实现后端校验验证码/1557362862840.png" alt="1557362862840"></p><p>[^这里说一下后端的实现：其实这个uuid是为了和图片做绑定而产生的，在数据库的表示如下图所示]: </p><p><img src="/2019/05/09/女朋友问我怎么实现后端校验验证码/1557362963541.png" alt="1557362963541"></p><ol start="3"><li>登录校验验证码：用户登录填写账号、密码、验证码，<strong>带着uuid</strong> （重点：带着uuid，这个uuid其实就相当于这张图片验证码的一个识别，只有带着这个，后台才知道你用的是哪张验证码，才有办法去校验）调用后台登录接口，后台 <strong>通过带过来的uuid去查询这张图片验证码的文本验证码</strong>是多少，然后比对校验就可以了，是不是很简单。</li></ol><p>当然验证码都是有失效时间的，还有验证码用完就删掉啊，这个就不多说了，聪明的人自然会懂，我女朋友那么聪明，应该会懂的 O(∩_∩)O~</p><p>下面的是具体实现代码，留作备用观摩。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"captcha.jpg"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">captcha</span><span class="params">(HttpServletResponse response, @RequestParam String uuid)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.进入函数</span></span><br><span class="line">       logger.info(<span class="string">"-&gt; auth login: generate captcha"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2 验证uuid格式</span></span><br><span class="line">       <span class="keyword">if</span>(!TypeValidatorUtil.isUuid(uuid))&#123;</span><br><span class="line">           logger.info(<span class="string">"-- auth login: uuid not valid"</span>);</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> CPException(<span class="string">"uuid 不合法"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.response设置</span></span><br><span class="line">   response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-store, no-cache"</span>);</span><br><span class="line">   response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="comment">//4.生成图片验证码并将对应uuid和code保存数据库</span></span><br><span class="line">           BufferedImage image = authCaptchaService.getCaptcha(uuid);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//5.图片验证码返回到前端</span></span><br><span class="line">           ServletOutputStream out = response.getOutputStream();</span><br><span class="line">           ImageIO.write(image, <span class="string">"jpg"</span>, out);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//6.正常退出函数</span></span><br><span class="line">           logger.info(<span class="string">"&lt;- auth login: generate captcha"</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//7.关闭连接</span></span><br><span class="line">           IOUtils.closeQuietly(out);</span><br><span class="line">       &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">           logger.error(e.getMessage());</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> CPException(<span class="string">"IO错误"</span>);</span><br><span class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           logger.error(e.getMessage());</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> CPException(<span class="string">"获取验证码失败"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BufferedImage <span class="title">getCaptcha</span><span class="params">(String uuid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isBlank(uuid))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CPException(<span class="string">"uuid不能为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成文字验证码</span></span><br><span class="line">    String code = producer.createText();</span><br><span class="line"></span><br><span class="line">    AuthCaptchaEntity captchaEntity = <span class="keyword">new</span> AuthCaptchaEntity();</span><br><span class="line">    captchaEntity.setUuid(uuid);</span><br><span class="line">    captchaEntity.setCode(code);</span><br><span class="line">    <span class="comment">//5分钟后过期</span></span><br><span class="line">    captchaEntity.setExpireTime(DateUtil.addDateMinutes(<span class="keyword">new</span> Date(), <span class="number">5</span>));</span><br><span class="line">    authCaptchaDao.insertCaptcha(captchaEntity);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> producer.createImage(code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.axet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;kaptcha.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 生成验证码配置</span><br><span class="line"> *</span><br><span class="line"> * @author zfan</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class KaptchaConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultKaptcha producer() &#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;kaptcha.border&quot;, &quot;no&quot;);</span><br><span class="line">        properties.put(&quot;kaptcha.textproducer.font.color&quot;, &quot;black&quot;);</span><br><span class="line">        properties.put(&quot;kaptcha.textproducer.char.space&quot;, &quot;5&quot;);</span><br><span class="line">        Config config = new Config(properties);</span><br><span class="line">        DefaultKaptcha defaultKaptcha = new DefaultKaptcha();</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        return defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>附：</p><p>JCaptcha简介</p><p>JCapthca是一个开源的用来生成图形验证码的Java开源组件，它非常强大，不光是可以生成图片式的验证码，还可以生成声音式的。</p><p>JCaptcha是CAPTCHA里面的一个比较著名的项目。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> kaptcha </tag>
            
            <tag> 女朋友 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初尝java8 lambda表达式</title>
      <link href="/2019/04/26/%E5%88%9D%E5%B0%9Djava8-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/04/26/%E5%88%9D%E5%B0%9Djava8-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="java8新特性之lambda表达式，之前很多面试官都会问java8新特性你了解吗，我会说我知道lambda表达式，但是我还很自豪的说但是我没用过，因为工作中别人也不会用，现在想想说的什么狗屁话，别人不用不代表你不能用啊，我要是面试官估计我也会给你个微笑"><a href="#java8新特性之lambda表达式，之前很多面试官都会问java8新特性你了解吗，我会说我知道lambda表达式，但是我还很自豪的说但是我没用过，因为工作中别人也不会用，现在想想说的什么狗屁话，别人不用不代表你不能用啊，我要是面试官估计我也会给你个微笑" class="headerlink" title="java8新特性之lambda表达式，之前很多面试官都会问java8新特性你了解吗，我会说我知道lambda表达式，但是我还很自豪的说但是我没用过，因为工作中别人也不会用，现在想想说的什么狗屁话，别人不用不代表你不能用啊，我要是面试官估计我也会给你个微笑"></a>java8新特性之lambda表达式，之前很多面试官都会问java8新特性你了解吗，我会说我知道lambda表达式，但是我还很自豪的说但是我没用过，因为工作中别人也不会用，现在想想说的什么狗屁话，别人不用不代表你不能用啊，我要是面试官估计我也会给你个微笑</h5><p>现在做的项目接口很多，但是难度不大，每天写的和乏味，为了增加点乐趣我特地使用了传说中的</p><p>lambda表达式，于是就有了下面的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">appList.forEach(app -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (starList.contains(app)) &#123;</span><br><span class="line">        app.put(<span class="string">"isStar"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        app.put(<span class="string">"isStar"</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>好吧，真的没难度，大佬看见不要笑话可好，溜了</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora 快捷键</title>
      <link href="/2019/04/26/typora-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2019/04/26/typora-%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<ul><li>无序列表：输入-之后输入空格</li><li>有序列表：输入数字+“.”之后输入空格</li><li>任务列表：-[空格]空格 文字</li><li>标题：ctrl+数字</li><li>表格：ctrl+t</li><li>生成目录：[TOC]按回车</li><li>选中一整行：ctrl+l</li><li>选中单词：ctrl+d</li><li>选中相同格式的文字：ctrl+e</li><li>跳转到文章开头：ctrl+home</li><li>跳转到文章结尾：ctrl+end</li><li>搜索：ctrl+f</li><li>替换：ctrl+h</li><li>引用：输入&gt;之后输入空格</li><li>代码块：ctrl+shift+`</li><li>加粗：ctrl+b</li><li>倾斜：ctrl+i</li><li>下划线：ctrl+u</li><li>删除线：alt+shift+5</li><li>插入图片：直接拖动到指定位置即可或者ctrl+shift+i</li><li>插入链接：ctrl+k</li></ul>]]></content>
      
      
      <categories>
          
          <category> Macdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apple iTunes 下载地址</title>
      <link href="/2019/04/26/Apple-iTunes-%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/"/>
      <url>/2019/04/26/Apple-iTunes-%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h5 id="iTunes-最新版"><a href="#iTunes-最新版" class="headerlink" title="iTunes 最新版"></a>iTunes 最新版</h5><ul><li>macOS:<a href="https://www.apple.com/itunes/download/macos" target="_blank" rel="noopener">官网地址,点击下载</a></li><li>Windows 64 bit:<a href="https://www.apple.com/itunes/download/win64" target="_blank" rel="noopener">官网地址,点击下载</a></li><li>Windows 32 bit:<a href="https://www.apple.com/itunes/download/win32" target="_blank" rel="noopener">官网地址,点击下载</a></li></ul><h5 id="iTunes-12-6-5"><a href="#iTunes-12-6-5" class="headerlink" title="iTunes 12.6.5"></a>iTunes 12.6.5</h5><ul><li>macOS:<a href="https://secure-appldnld.apple.com/itunes12/091-87821-20180912-69177170-B085-11E8-B6AB-C1D03409AD2A/iTunes12.6.5.dmg" target="_blank" rel="noopener">官网地址,点击下载</a> →→<a href="https://congcong0806.github.io/2018/06/22/iTunes/#macos-mojave" target="_blank" rel="noopener">macOS Mojave 查看这个方法</a></li><li>Windows 64 bit:<a href="https://secure-appldnld.apple.com/itunes12/091-87819-20180912-69177170-B085-11E8-B6AB-C1D03409AD2A6/iTunes64Setup.exe" target="_blank" rel="noopener">官网地址,点击下载</a></li><li>Windows 32 bit:<a href="https://secure-appldnld.apple.com/itunes12/091-87820-20180912-69177170-B085-11E8-B6AB-C1D03409AD2A5/iTunesSetup.exe" target="_blank" rel="noopener">官网地址,点击下载</a></li></ul><h5 id="iTunes-12-6-4"><a href="#iTunes-12-6-4" class="headerlink" title="iTunes 12.6.4"></a>iTunes 12.6.4</h5><ul><li>macOS:<a href="https://secure-appldnld.apple.com/itunes12/091-60759-201803029-1F70CB08-3131-11E8-9791-31052B2AA206/iTunes12.6.4.dmg" target="_blank" rel="noopener">官网地址,点击下载</a></li><li>Windows 64 bit:<a href="https://secure-appldnld.apple.com/itunes12/091-60765-201803029-1F70CB08-3131-11E8-9791-31052B2AA206/iTunes64Setup.exe" target="_blank" rel="noopener">官网地址,点击下载</a></li><li>Windows 32 bit:<a href="https://secure-appldnld.apple.com/itunes12/091-60766-201803029-1F70CB08-3131-11E8-9791-31052B2AA206/iTunesSetup.exe" target="_blank" rel="noopener">官网地址,点击下载</a></li></ul><h5 id="iTunes-12-6-3"><a href="#iTunes-12-6-3" class="headerlink" title="iTunes 12.6.3"></a>iTunes 12.6.3</h5><ul><li>macOS:<a href="https://secure-appldnld.apple.com/itunes12/091-33628-20170922-EF8F0FE4-9FEF-11E7-B113-91CF9A97A551/iTunes12.6.3.dmg" target="_blank" rel="noopener">官网地址,点击下载</a></li><li>Windows 64 bit:<a href="https://secure-appldnld.apple.com/itunes12/091-33626-20170922-F51D3530-A003-11E7-8324-03D19A97A551/iTunes64Setup.exe" target="_blank" rel="noopener">官网地址,点击下载</a></li><li>Windows 32 bit:<a href="https://secure-appldnld.apple.com/itunes12/091-33627-20170922-EF8CB708-9FEF-11E7-8504-92CF9A97A551/iTunesSetup.exe" target="_blank" rel="noopener">官网地址,点击下载</a></li></ul><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><ol><li>从 iTunes 12.7 开始，Apple 去掉了 App Store 功能，也就无法在电脑上下载和管理 App 安装包，非常不方便。</li><li>之后 Apple 又出了 iTunes 12.6.3 特殊版本，重新加入了 App Store 功能，可以下载和管理 App 的 ipa 安装包。</li><li>目前 iTunes 12.6.3 又更新至 iTunes 12.6.5 版本，也有App Store 功能。</li></ol><h5 id="macOS-Mojave"><a href="#macOS-Mojave" class="headerlink" title="macOS Mojave"></a>macOS Mojave</h5><p>macOS Mojave 10.14 上安装 iTunes 12.6 的方法</p><ol><li>下载这个文件，双击打开文件，或者使用“脚本编辑器”打开这个文件 (文件下载地址:<a href="http://t.cn/E4tLunQ" target="_blank" rel="noopener">http://t.cn/E4tLunQ</a> )</li><li>脚本编辑器，点击“运行”按钮(或按快捷键 Command+R)，根据提示操作就行了</li><li>大致过程:先删除本机 iTunes，选择 iTunes 12.6 文件，修改文件后再安装 iTunes 12.6</li><li>方法来源:<a href="http://t.cn/E4txIvq" target="_blank" rel="noopener">http://t.cn/E4txIvq</a></li><li>如果打开 iTunes 12.6 提示<code>无法读取文件“iTunes Library.itl”，因为它是由更高版本的 iTunes 所创建。</code>，点击“退出”按钮，打开文件夹 <code>/用户/cc/音乐/iTunes(cc是用户名)</code>，删除 “iTunes Library.itl” 文件，再 iTunes 12.6 就 OK 了</li></ol><p><u>方法来源</u>：<a href="http://t.cn/E4txIvq" target="_blank" rel="noopener">http://t.cn/E4txIvq</a></p><p>转自：&lt;<a href="https://congcong0806.github.io/2018/06/22/iTunes" target="_blank" rel="noopener">Apple iTunes 下载地址</a>&gt;</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apple </tag>
            
            <tag> iTunes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 之 FIND_IN_SET()</title>
      <link href="/2019/04/12/mysql-%E4%B9%8B-FIND-IN-SET/"/>
      <url>/2019/04/12/mysql-%E4%B9%8B-FIND-IN-SET/</url>
      
        <content type="html"><![CDATA[<!--标题有图，不能带_,正确标题是  mysql 之 FIND_IN_SET()--><h3 id="工作中经常用到一对多，建表时为了方便可能会将多的那方用逗号隔开，但是当查询的时候可能就比较麻烦，今天学到了一个函数，可以直接查看一个数值是否在一段逗号分隔的字符串中"><a href="#工作中经常用到一对多，建表时为了方便可能会将多的那方用逗号隔开，但是当查询的时候可能就比较麻烦，今天学到了一个函数，可以直接查看一个数值是否在一段逗号分隔的字符串中" class="headerlink" title="工作中经常用到一对多，建表时为了方便可能会将多的那方用逗号隔开，但是当查询的时候可能就比较麻烦，今天学到了一个函数，可以直接查看一个数值是否在一段逗号分隔的字符串中"></a>工作中经常用到一对多，建表时为了方便可能会将多的那方用逗号隔开，但是当查询的时候可能就比较麻烦，今天学到了一个函数，可以直接<code>查看一个数值是否在一段逗号分隔的字符串中</code></h3><p><img src="/2019/04/12/mysql-之-FIND-IN-SET/1555033486048.png" alt="1555033486048"></p><p>直接看图。</p><!--特地试了一下，只支持英文逗号分隔，否则无效-->]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 返回apidoc html踩的坑</title>
      <link href="/2019/04/11/springboot-%E8%BF%94%E5%9B%9Eapidoc-html%E8%B8%A9%E7%9A%84%E5%9D%91/"/>
      <url>/2019/04/11/springboot-%E8%BF%94%E5%9B%9Eapidoc-html%E8%B8%A9%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h3 id="项目用apidoc做接口文档，之前一直用的swagger，可是怕我坑惨了"><a href="#项目用apidoc做接口文档，之前一直用的swagger，可是怕我坑惨了" class="headerlink" title="项目用apidoc做接口文档，之前一直用的swagger，可是怕我坑惨了"></a>项目用apidoc做接口文档，之前一直用的swagger，可是怕我坑惨了</h3><ul><li><p>先说下apidoc的搭建，网上教程很多</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1. Install node.js</span><br><span class="line"></span><br><span class="line">To check if node.js is successfully installed:</span><br><span class="line">λ node --version</span><br><span class="line">v10.15.0</span><br><span class="line"></span><br><span class="line">2. After node.js installed, install apiDoc.</span><br><span class="line"></span><br><span class="line">npm install apidoc -g</span><br><span class="line"></span><br><span class="line">To check if apiDoc is successfully installed:</span><br><span class="line">λ apidoc -h</span><br><span class="line">Usage: apidoc [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">3. Set the apidoc configurations in apidoc.json.</span><br><span class="line"></span><br><span class="line">4. Write annotations above your functions in your project.</span><br><span class="line"></span><br><span class="line">5. Generate static api doc files.</span><br><span class="line"></span><br><span class="line">λ apidoc -i user\ -o user\src\main\webapp\apidoc</span><br></pre></td></tr></table></figure></li></ul><p>无非就是这五个步骤，不多说，执行<code>apidoc -i user\ -o user\src\main\webapp\apidoc</code></p><p>后在<code>webapp</code>下会生成这样的文件：</p><p><img src="/2019/04/11/springboot-返回apidoc-html踩的坑/1554969798307.png" alt="1554969798307"></p><p>其实直接点击<code>index.html</code>就可以打开接口文档页面，只是<code>url</code>是本地路径，不方便，部署之后也不方便访问，于是新建一个控制器来调度访问，如下</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/apidoc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApidocController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ApidocController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"Go to apidoc index page"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/apidoc/index.html"</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServletException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>springboot</code>访问HTML需要依赖<code>thymeleaf</code>,在<code>pom.xml</code>加上依赖</p><p>​    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf template--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后问题来了，用<code>springboot</code>内置<code>tomcat</code>启动项目之后，是死活访问不到静态页面的，不行你可以试试，你会看见可爱的<code>404</code></p><p><img src="/2019/04/11/springboot-返回apidoc-html踩的坑/1554970128481.png" alt="1554970128481"></p><p>网上查了半天没找到原因，可能也就我一个人遇到这个情况吧，然后各种原因查找之后，用外置<code>tomcat</code>启动，发射 ——–&gt;</p><p><img src="/2019/04/11/springboot-返回apidoc-html踩的坑/1554970229736.png" alt="1554970229736"></p><p>你就看到它了，具体原因未查明也查不明，不倒腾了，反正线上部署肯定也是外置<code>tomcat</code>，影响不大，end.</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> apidoc </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot入参直接转换时间格式</title>
      <link href="/2019/04/08/springboot%E5%85%A5%E5%8F%82%E7%9B%B4%E6%8E%A5%E8%BD%AC%E6%8D%A2%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/"/>
      <url>/2019/04/08/springboot%E5%85%A5%E5%8F%82%E7%9B%B4%E6%8E%A5%E8%BD%AC%E6%8D%A2%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>##JDK8新增了Localdate和Localdatetime，对时间操作更加方便，springboot入参可直接将string转为时间格式，如下</p><p><img src="/2019/04/08/springboot入参直接转换时间格式/1554709730751.png" alt="1554709730751"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/view/list"</span>)</span><br><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"获取用户信息列表"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">list</span><span class="params">(Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">              String account,</span></span></span><br><span class="line"><span class="function"><span class="params">              String nickname,</span></span></span><br><span class="line"><span class="function"><span class="params">              @RequestParam(value = <span class="string">"startTime"</span>,required = <span class="keyword">false</span>)</span> @<span class="title">DateTimeFormat</span><span class="params">(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span> LocalDateTime startTime,</span></span><br><span class="line"><span class="function">              @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"endTime"</span>,required = <span class="keyword">false</span>)</span> @<span class="title">DateTimeFormat</span><span class="params">(pattern = <span class="string">"yyyy-MM-dd"</span>)</span> LocalDate endTime,</span></span><br><span class="line"><span class="function">              Integer pageNum,</span></span><br><span class="line"><span class="function">              Integer pageSize)</span>&#123;</span><br><span class="line">    List&lt;UserInfo&gt; list = userInfoService.getList();</span><br><span class="line">    <span class="keyword">return</span> R.ok().put(<span class="string">"list"</span>,list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 入参 </tag>
            
            <tag> date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos注册中心初体验</title>
      <link href="/2019/03/26/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2019/03/26/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="Nacos注册中心初体验"><a href="#Nacos注册中心初体验" class="headerlink" title="Nacos注册中心初体验"></a>Nacos注册中心初体验</h2><p>接触SpringCloud以来一直是用 <code>eurrka</code>做注册中心，闭源之后<code>Nacos</code>必然是大趋势，最近空闲刚好尝试一下。</p><p><code>Nacos</code>既可以做注册中心也可以替代<code>spring cloud config</code>统一管理配置，今天只是尝试一下注册中心用法。</p><h3 id="搭建与启动服务端"><a href="#搭建与启动服务端" class="headerlink" title="搭建与启动服务端"></a>搭建与启动服务端</h3><p>搭建服务有两种方式：</p><p>1.源码编译：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p><p>2.直接下载压缩包解压后启动</p><p><img src="/2019/03/26/Nacos注册中心初体验/1553564627712.png" alt="1553564627712"></p><p>启动成功后，访问 <a href="http://127.0.0.1:8848/nacos" target="_blank" rel="noopener">http://127.0.0.1:8848/nacos</a> 即可看到登录页面，默认账号密码都是<code>nacos</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Linux/Unix/Mac 操作系统，执行命令 sh startup.sh -m standalone</span><br><span class="line">Windows 操作系统，执行命令 cmd startup.cmd</span><br></pre></td></tr></table></figure><h3 id="搭建客户端并注册"><a href="#搭建客户端并注册" class="headerlink" title="搭建客户端并注册"></a>搭建客户端并注册</h3><ul><li>创建<code>spring boot</code> 项目</li><li>配置<code>pom.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos 的服务注册与发现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">//加注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置 <code>application.yml</code></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">test-provider</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line">      <span class="comment"># 是否展示健康检查详情</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>至此，项目启动后在服务端页面便能看到服务已经注册上来了</p><p><img src="/2019/03/26/Nacos注册中心初体验/1553565177529.png" alt="1553565177529"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> java </tag>
            
            <tag> Nacos </tag>
            
            <tag> 注册中心 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github每次发布重新绑定域名问题</title>
      <link href="/2019/03/25/Github%E6%AF%8F%E6%AC%A1%E5%8F%91%E5%B8%83%E9%87%8D%E6%96%B0%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/25/Github%E6%AF%8F%E6%AC%A1%E5%8F%91%E5%B8%83%E9%87%8D%E6%96%B0%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="github搭建的hexo博客可以设置自定义域名，如果不配置的话每次都需要手动设置，每次发布就需要设置一次"><a href="#github搭建的hexo博客可以设置自定义域名，如果不配置的话每次都需要手动设置，每次发布就需要设置一次" class="headerlink" title="github搭建的hexo博客可以设置自定义域名，如果不配置的话每次都需要手动设置，每次发布就需要设置一次"></a>github搭建的hexo博客可以设置自定义域名，如果不配置的话每次都需要手动设置，每次发布就需要设置一次</h3><p>解决办法：只需要在主题根目录、项目根目录、一级source根目录放置’CNAME’文件即可</p><h3 id="另外新装hexo环境下hexo-d可能会遇到报错的问题"><a href="#另外新装hexo环境下hexo-d可能会遇到报错的问题" class="headerlink" title="另外新装hexo环境下hexo d可能会遇到报错的问题"></a>另外新装hexo环境下hexo d可能会遇到报错的问题</h3><p>解决办法： 设置<code>_config.yml</code> - <code>auto_detect</code> 为 <code>false</code> 即可.</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7.4搭建shadowsocks</title>
      <link href="/2019/03/02/CentOS7-4%E6%90%AD%E5%BB%BAshadowsocks/"/>
      <url>/2019/03/02/CentOS7-4%E6%90%AD%E5%BB%BAshadowsocks/</url>
      
        <content type="html"><![CDATA[<h3 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h3><p>pip是 python 的包管理工具。在本文中将使用 python 版本的 shadowsocks，此版本的 shadowsocks 已发布到 pip 上，因此我们需要通过 pip 命令来安装。</p><p>在控制台执行以下命令安装 pip：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"</span><br><span class="line">[root@server ~]# python get-pip.py</span><br></pre></td></tr></table></figure><h3 id="安装配置-shadowsocks"><a href="#安装配置-shadowsocks" class="headerlink" title="安装配置 shadowsocks"></a>安装配置 shadowsocks</h3><p>在控制台执行以下命令安装 shadowsocks：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# pip install --upgrade pip</span><br><span class="line">[root@server ~]# pip install shadowsocks</span><br></pre></td></tr></table></figure><p>安装完成后，需要创建shadowsocks的配置文件/etc/shadowsocks.json，编辑内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# vim /etc/shadowsocks.json</span><br><span class="line">&#123;</span><br><span class="line">  "server": "0.0.0.0",</span><br><span class="line">  "local_address": "127.0.0.1",</span><br><span class="line">  "local_port": 1080,</span><br><span class="line">  "port_password": &#123;</span><br><span class="line">    "8080": "填写密码",</span><br><span class="line">    "8081": "填写密码"</span><br><span class="line">  &#125;,</span><br><span class="line">  "timeout": 600,</span><br><span class="line">  "method": "aes-256-cfb"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>method为加密方法，可选aes-128-cfb, aes-192-cfb, aes-256-cfb, bf-cfb, cast5-cfb, des-cfb, rc4-md5, chacha20, salsa20, rc4, table<br>port_password为端口对应的密码，可使用密码生成工具生成一个随机密码<br>以上两项信息在配置 shadowsocks 客户端时需要配置一致，具体说明可查看 shadowsocks 的帮助文档。</p><p><strong>如果你不需要配置多个端口的话，仅配置单个端口，则可以使用以下配置：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "server": "0.0.0.0",</span><br><span class="line">  "server_port": 8080,</span><br><span class="line">  "password": "填写密码",</span><br><span class="line">  "method": "aes-256-cfb"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>server_port为服务监听端口</li><li>password为密码</li></ul><p>同样的以上两项信息在配置 shadowsocks 客户端时需要配置一致。</p><h3 id="配置自启动"><a href="#配置自启动" class="headerlink" title="配置自启动"></a>配置自启动</h3><p>编辑shadowsocks 服务的启动脚本文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# vim /etc/systemd/system/shadowsocks.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>执行以下命令启动 shadowsocks 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# systemctl enable shadowsocks</span><br><span class="line">[root@server ~]# systemctl start shadowsocks</span><br></pre></td></tr></table></figure><p>检查 shadowsocks 服务是否已成功启动，可以执行以下命令查看服务的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status shadowsocks -l</span><br></pre></td></tr></table></figure><p>确认服务启动成功后，配置防火墙规则，开放你配置的端口，不然客户端是无法连接的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">success</span><br><span class="line">[root@server ~]# firewall-cmd --zone=public --add-port=8081/tcp --permanent</span><br><span class="line">success</span><br><span class="line">[root@server ~]# firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure><p><strong>附上一键安装脚本代码：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span> Install Shadowsocks on CentOS 7</span><br><span class="line"></span><br><span class="line">echo "Installing Shadowsocks..."</span><br><span class="line"></span><br><span class="line">random-string()</span><br><span class="line">&#123;</span><br><span class="line">    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $&#123;1:-32&#125; | head -n 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CONFIG_FILE=/etc/shadowsocks.json</span><br><span class="line">SERVICE_FILE=/etc/systemd/system/shadowsocks.service</span><br><span class="line">SS_PASSWORD=$(random-string 32)</span><br><span class="line">SS_PORT=8388</span><br><span class="line">SS_METHOD=aes-256-cfb</span><br><span class="line">SS_IP=`ip route get 1 | awk '&#123;print $NF;exit&#125;'`</span><br><span class="line">GET_PIP_FILE=/tmp/get-pip.py</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> install pip</span><br><span class="line">curl "https://bootstrap.pypa.io/get-pip.py" -o "$&#123;GET_PIP_FILE&#125;"</span><br><span class="line">python $&#123;GET_PIP_FILE&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> install shadowsocks</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">pip install shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> create shadowsocls config</span><br><span class="line">cat &lt;&lt;EOF | sudo tee $&#123;CONFIG_FILE&#125;</span><br><span class="line">&#123;</span><br><span class="line">  "server": "0.0.0.0",</span><br><span class="line">  "server_port": $&#123;SS_PORT&#125;,</span><br><span class="line">  "password": "$&#123;SS_PASSWORD&#125;",</span><br><span class="line">  "method": "$&#123;SS_METHOD&#125;"</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> create service</span><br><span class="line">cat &lt;&lt;EOF | sudo tee $&#123;SERVICE_FILE&#125;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/ssserver -c $&#123;CONFIG_FILE&#125;</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> start service</span><br><span class="line">systemctl enable shadowsocks</span><br><span class="line">systemctl start shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> view service status</span><br><span class="line">sleep 5</span><br><span class="line">systemctl status shadowsocks -l</span><br><span class="line"></span><br><span class="line">echo "================================"</span><br><span class="line">echo ""</span><br><span class="line">echo "Congratulations! Shadowsocks has been installed on your system."</span><br><span class="line">echo "You shadowsocks connection info:"</span><br><span class="line">echo "--------------------------------"</span><br><span class="line">echo "server:      $&#123;SS_IP&#125;"</span><br><span class="line">echo "server_port: $&#123;SS_PORT&#125;"</span><br><span class="line">echo "password:    $&#123;SS_PASSWORD&#125;"</span><br><span class="line">echo "method:      $&#123;SS_METHOD&#125;"</span><br><span class="line">echo "--------------------------------"</span><br></pre></td></tr></table></figure><p><strong>配置客户端</strong><br>我这里配置的是windows的客户端，挺方便的，点击即用，不需要安装。</p><p>Windows客户端下载地址：<br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p><p>Mac客户端下载地址：<br><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/ShadowsocksX-NG/releases</a></p><p>Android客户端下载地址：<br><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android/releases</a></p><h3 id="配置BBR加速"><a href="#配置BBR加速" class="headerlink" title="配置BBR加速"></a>配置BBR加速</h3><p><strong>什么是BBR：</strong><br>TCP BBR是谷歌出品的TCP拥塞控制算法。BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。</p><p>Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。</p><p>TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。</p><p>BBR解决了两个问题：</p><p>在有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。</p><p>降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。<br>Google 在 2016年9月份开源了他们的优化网络拥堵算法BBR，最新版本的 Linux内核(4.9-rc8)中已经集成了该算法。</p><p>对于TCP单边加速，并非所有人都很熟悉，不过有另外一个大名鼎鼎的商业软件“锐速”，相信很多人都清楚。特别是对于使用国外服务器或者VPS的人来说，效果更佳。</p><p>BBR项目地址：<br><a href="https://github.com/google/bbr" target="_blank" rel="noopener">https://github.com/google/bbr</a></p><p><strong>升级内核，第一步首先是升级内核到支持BBR的版本：</strong></p><p>1.yum更新系统版本：<br><code>yum update</code><br>2.查看系统版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.4.1708 (Core) </span><br><span class="line">[root@server ~]#</span><br></pre></td></tr></table></figure><p>3.安装elrepo并升级内核：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">[root@server ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">[root@server ~]# yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br></pre></td></tr></table></figure><p>4.更新grub文件并重启系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \'</span><br><span class="line">CentOS Linux 7 Rescue 8619ff5e1306499eac41c02d3b23868e (4.14.14-1.el7.elrepo.x86_64)</span><br><span class="line">CentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-693.11.6.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (0-rescue-c73a5ccf3b8145c3a675b64c4c3ab1d4) 7 (Core)</span><br><span class="line">[root@server ~]# grub2-set-default 0</span><br><span class="line">[root@server ~]# reboot</span><br></pre></td></tr></table></figure><p>5.重启完成后查看内核是否已更换为4.14版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# uname -r</span><br><span class="line">4.14.14-1.el7.elrepo.x86_64</span><br><span class="line">[root@server ~]#</span><br></pre></td></tr></table></figure><p>6.开启bbr：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# vim /etc/sysctl.conf    # 在文件末尾添加如下内容</span><br><span class="line">net.core.default_qdisc = fq</span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure><p>7.加载系统参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]# sysctl -p</span><br><span class="line">net.ipv6.conf.all.accept_ra = 2</span><br><span class="line">net.ipv6.conf.eth0.accept_ra = 2</span><br><span class="line">net.core.default_qdisc = fq</span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br><span class="line">[root@vultr ~]#</span><br></pre></td></tr></table></figure><p>如上，输出了我们添加的那两行配置代表正常。</p><p>8.确定bbr已经成功开启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]# sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br><span class="line">[root@vultr ~]# lsmod | grep bbr</span><br><span class="line">tcp_bbr                20480  2 </span><br><span class="line">[root@vultr ~]#</span><br></pre></td></tr></table></figure><p>输出内容如上，则表示bbr已经成功开启。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 博客 </tag>
            
            <tag> linux </tag>
            
            <tag> ss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用的环境安装</title>
      <link href="/2019/01/29/linux%E5%B8%B8%E7%94%A8%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
      <url>/2019/01/29/linux%E5%B8%B8%E7%94%A8%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="以tar-xz结尾的压缩包解压方式"><a href="#以tar-xz结尾的压缩包解压方式" class="headerlink" title="以tar.xz结尾的压缩包解压方式"></a>以tar.xz结尾的压缩包解压方式</h3><p>先 <code>xz -d ***.tar.xz</code> 得到tar结尾的包</p><p>然后 <code>tar -xvf  ***.tar</code> 解压</p><h3 id="Linux安装rz-sz命令"><a href="#Linux安装rz-sz命令" class="headerlink" title="Linux安装rz/sz命令"></a>Linux安装rz/sz命令</h3><blockquote><p>在SecureCRT这样的ssh登录软件里, 通过在Linux界面里输入rz/sz命令来上传/下载文件. 对于某些linux版本, rz/sz默认没有安装所以需要手工安装。<br>      sz: 将选定的文件发送(send)到本地机器;<br>      rz：运行该命令会弹出 一个文件选择窗口, 从本地选择文件上传到服务器(receive).</p></blockquote><p>最简单的是yum安装 <code>yum install lrzsz</code></p><p>没有网络的时候可以下载安装包安装</p><pre><code>首先通过sftp工具把安 装文件上传到tmp目录下.   # cd tmp   # wget http://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz   # tar zxvf lrzsz-0.12.20.tar.gz &amp;&amp; cd lrzsz-0.12.20   # ./configure &amp;&amp; make &amp;&amp; make install   上面安装过程默认把lsz和lrz安装到了/usr/local/bin/目录下, 下面创建软链接, 并命名为rz/sz:   # cd /usr/bin   # ln -s /usr/local/bin/lrz rz   # ln -s /usr/local/bin/lsz sz</code></pre><h3 id="Linux安装wget"><a href="#Linux安装wget" class="headerlink" title="Linux安装wget"></a>Linux安装wget</h3><pre><code>yum -y install wget</code></pre><h3 id="Linux安装Git"><a href="#Linux安装Git" class="headerlink" title="Linux安装Git"></a>Linux安装Git</h3><pre><code>yum install git-core</code></pre><h3 id="Linux安装Node-js"><a href="#Linux安装Node-js" class="headerlink" title="Linux安装Node.js"></a>Linux安装Node.js</h3><h4 id="不推荐在线安装，推荐编译安装："><a href="#不推荐在线安装，推荐编译安装：" class="headerlink" title="不推荐在线安装，推荐编译安装："></a>不推荐在线安装，推荐编译安装：</h4><ol><li><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">官网</a>获取到下载地址 <code>wget https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gz</code></li><li>解压 <code>tar -zxvf node-v10.15.0.tar.gz</code></li><li><p>解压完成后依次执行： cd node-v10.15.0</p><pre><code>./configuremake（编译时间较长，耐心等待）编译完成后，使用下面命令安装：sudo make install  这里一定要加sudo</code></pre><p><strong>此外</strong>，我们还可以使用git在github上将源码clone下来，同样执行以上命令编译安装。<br>执行<code>./configure</code>可能会提示确实c++框架，安装即可 <code>sudo yum install gcc gcc-c++</code></p></li></ol><h4 id="编译安装时间太长而且容易出错，可以使用yum安装"><a href="#编译安装时间太长而且容易出错，可以使用yum安装" class="headerlink" title="编译安装时间太长而且容易出错，可以使用yum安装"></a>编译安装时间太长而且容易出错，可以使用yum安装</h4><p>yum安装正常情况 <code>yum install nodejs</code>，但是会报错，原来 CentOS 的官方源并没有 Nodejs 的安装包，安装需要添加 EPEL 源，执行以下命令安装：<a href="https://jingsam.github.io/2015/12/01/install-nodejs-on-centos.html" target="_blank" rel="noopener">参考</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">sudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</span><br><span class="line">sudo yum -y install nodejs npm --enablerepo=epel</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> linux </tag>
            
            <tag> 学习 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac常用软件收藏</title>
      <link href="/2019/01/25/Mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%94%B6%E8%97%8F/"/>
      <url>/2019/01/25/Mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%94%B6%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="软件收藏"><a href="#软件收藏" class="headerlink" title="软件收藏"></a>软件收藏</h3><ol><li><a href="https://xclient.info/" target="_blank" rel="noopener">xclient</a> | 常用软件都有，个别因为版权问题下架，所有安装包解压需要密码 <code>xclient.info</code></li><li><a href="https://www.waitsun.com/" target="_blank" rel="noopener">爱情守望者</a> | 差不多，安装包没有密码</li><li><a href="http://www.sdifen.com/" target="_blank" rel="noopener">史蒂芬周的博客</a> | 一个博客，居然还收费下载，有的也免费，随便看看还行，主要用来看软件更新日志</li><li><a href="http://mac-torrent-download.net/" target="_blank" rel="noopener">mac-torrent-download</a> | 神站不解释，不过广告超多，而且都是强制广告，需翻墙</li><li><a href="https://greasyfork.org/zh-CN/scripts" target="_blank" rel="noopener">油猴脚本</a> | 油猴的脚本站</li><li><a href="http://msdn.itellyou.cn/" target="_blank" rel="noopener">MSDN</a> | 可以下载到纯净的系统安装包</li><li><a href="https://support.apple.com/zh-cn/HT208079" target="_blank" rel="noopener">旧版iTunes</a> | 可以下载最后一个支持下载安装包的iTunes</li><li><a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">Homebrew</a> | macOS 缺失的软件包的管理器</li><li><a href="https://www.freedownloadmanager.org/" target="_blank" rel="noopener">freedownloadmanager</a> | 一个全平台的下载器（顶替迅雷）</li><li><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">idea.lanyus</a> | 破解idea专用</li><li><a href="https://www.cnblogs.com/zqr99/p/8708069.html" target="_blank" rel="noopener">idea 2018.1破解激活方法,有效期至2099年</a> | 目前有效</li><li><a href="http://www.sequelpro.com/" target="_blank" rel="noopener">sequelpro</a> | mac上一个mysql图形化界面工具，超喜欢，可惜不更新了</li><li><a href="https://iina.io/" target="_blank" rel="noopener">IINA</a> | Mac上一个开源播放器，超好用</li><li><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a> | 全平台图床工具</li><li><a href="https://github.com/Caldis/Mos" target="_blank" rel="noopener">Mos</a> | 一个用于在 MacOS 上平滑你的鼠标滚动效果或单独设置滚动方向的小工具, 让你的滚轮爽如触控板</li><li><a href="https://github.com/trazyn/ieaseMusic" target="_blank" rel="noopener">ieaseMusic</a> | Mac上开源的网易云播放器，界面不错</li><li><a href="https://github.com/alanzhangzm/Photon" target="_blank" rel="noopener">Photon</a> | 基于aria2的轻量级多线程下载器。</li><li><a href="https://lai.yuweining.cn/archives/1757/" target="_blank" rel="noopener">迅雷 U 享版</a> | 迅雷 U 享版</li><li><a href="http://irreader.netqon.com/" target="_blank" rel="noopener">irreader</a>  | 订阅网页、RSS和Podcast，具备急速的阅读体验，高品质、免费、无广告、多平台的RSS阅读器。 </li><li><a href="https://glaciericons.com/" target="_blank" rel="noopener">Glacier</a> | 展示macos图标</li><li><a href="https://github.com/idealclover/Easy-to-RSS" target="_blank" rel="noopener">Easy-to-RSS</a> | 功能：获取网页RSS，复制到剪贴板并打开该RSS网页</li><li><a href="https://github.com/kyleneideck/BackgroundMusic" target="_blank" rel="noopener">Background Music</a> | mac上可以单独调节各种音量大小的软件</li></ol><h3 id="壁纸网站"><a href="#壁纸网站" class="headerlink" title="壁纸网站"></a>壁纸网站</h3><ol><li><a href="https://interfacelift.com/wallpaper/downloads/date/any/" target="_blank" rel="noopener">https://interfacelift.com/wallpaper/downloads/date/any/</a> | 质量高，更新慢</li><li><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a> | 质量中等，更新较快</li><li><a href="https://alpha.wallhaven.cc/random?page=2" target="_blank" rel="noopener">https://alpha.wallhaven.cc/random?page=2</a></li><li><a href="https://wallions.com/search" target="_blank" rel="noopener">https://wallions.com/search</a></li><li><a href="https://www.lifeofpix.com/" target="_blank" rel="noopener">https://www.lifeofpix.com/</a></li><li><a href="https://visualhunt.com/" target="_blank" rel="noopener">https://visualhunt.com/</a></li><li><a href="https://wallions.com/search/mountain" target="_blank" rel="noopener">https://wallions.com/search/mountain</a></li><li><a href="http://streetwill.co/" target="_blank" rel="noopener">http://streetwill.co/</a></li><li><a href="https://unsplash.com/@joshshutler?utm_source=osx&amp;utm_medium=menuItem&amp;utm_campaign=wallcat" target="_blank" rel="noopener">https://unsplash.com/@joshshutler?utm_source=osx&amp;utm_medium=menuItem&amp;utm_campaign=wallcat</a></li><li><a href="https://lai.yuweining.cn/archives/575/" target="_blank" rel="noopener">https://lai.yuweining.cn/archives/575/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> MacBook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> MacBook </tag>
            
            <tag> 收藏 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux docker Shadowsocks 常规操作</title>
      <link href="/2019/01/25/linux%20docker%20Shadowsocks%20%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/01/25/linux%20docker%20Shadowsocks%20%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="linux上跑ss，真的很简单"><a href="#linux上跑ss，真的很简单" class="headerlink" title="linux上跑ss，真的很简单"></a>linux上跑ss，真的很简单</h3><h4 id="第一步先装docker-CentOS最好是64位的，最好是CentOS7-6的话没试过应该有其他的办法"><a href="#第一步先装docker-CentOS最好是64位的，最好是CentOS7-6的话没试过应该有其他的办法" class="headerlink" title="第一步先装docker,CentOS最好是64位的，最好是CentOS7,6的话没试过应该有其他的办法"></a>第一步先装docker,CentOS最好是64位的，最好是CentOS7,6的话没试过应该有其他的办法</h4><ol><li>先检查内核版本 <code>$ uname -r</code> 返回的值大于3.10即可。</li></ol><p><img src="/2019/01/25/linux docker Shadowsocks 常规操作/1553736307138.png" alt="1553736307138"></p><ol start="2"><li>使用 sudo 或 root 权限的用户登入终端。</li><li>确保yum是最新的 <code>$ yum update</code></li><li>安装 docker <code>yum install docker -y</code></li><li><p>启动 docker 服务 </p><pre><code>service docker startchkconfig docker on</code></pre></li><li><p>拉取 <a href="https://github.com/oddrationale/docker-shadowsocks?spm=a2c4e.11153940.blogcont599205.11.3fcb6ac5rqARUl" target="_blank" rel="noopener">docker 镜像</a>  <code>docker pull oddrationale/docker-shadowsocks</code></p></li></ol><p>!<img src="/2019/01/25/linux docker Shadowsocks 常规操作/1553736512379.png" alt="1553736512379"></p><ol start="7"><li><p>运行 docker 镜像 </p><pre><code>docker run -d -p 12345:12345 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 12345 -k welcome -m aes-256-cfb-d参数允许 docker 常驻后台运行-p来指定要映射的端口，这里端口号统一保持一致即可。例如：12345-s服务器 IP 地址，不用动-k后面设置你的 VPN 的密码，比如：welcome-m指定加密方式</code></pre></li><li>运行<code>docker ps</code>查看容器是否已成功运行起来了。</li></ol><h3 id="docker的常用命令汇总"><a href="#docker的常用命令汇总" class="headerlink" title="docker的常用命令汇总"></a>docker的常用命令汇总</h3><h4 id="1、docker的启动、停止、重启"><a href="#1、docker的启动、停止、重启" class="headerlink" title="1、docker的启动、停止、重启"></a>1、docker的启动、停止、重启</h4><pre><code>[root@localhost ~]# service docker restartRedirecting to /bin/systemctl restart docker.service[root@localhost ~]# service docker stopRedirecting to /bin/systemctl stop docker.service[root@localhost ~]# service docker startRedirecting to /bin/systemctl start docker.service</code></pre><h4 id="2、docker创建一个容器"><a href="#2、docker创建一个容器" class="headerlink" title="2、docker创建一个容器"></a>2、docker创建一个容器</h4><pre><code>[root@localhost ~]# docker run -it -v /docker_test:/yufei  --name yufei_6 centos[root@724e7701f0d4 /]#    -i：允许我们对容器内的 (STDIN) 进行交互  -t：在新容器内指定一个伪终端或终端 -v：是挂在宿机目录， /docker_test是宿机目录，/yufei是当前docker容器的目录，宿机目录必须是绝对的。--name：是给容器起一个名字，可省略，省略的话docker会随机产生一个名字</code></pre><h4 id="3、docker启动的容器列表"><a href="#3、docker启动的容器列表" class="headerlink" title="3、docker启动的容器列表"></a>3、docker启动的容器列表</h4><pre><code>[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES724e7701f0d4        centos              &quot;/bin/bash&quot;         4 minutes ago       Up 4 minutes                            yufei_6f9097691663e        centos              &quot;/bin/bash&quot;         5 minutes ago       Up 5 minutes                            yufei_5[root@localhost ~]# </code></pre><h4 id="4、查看docker创建的所有容器"><a href="#4、查看docker创建的所有容器" class="headerlink" title="4、查看docker创建的所有容器"></a>4、查看docker创建的所有容器</h4><pre><code>[root@localhost ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                        PORTS               NAMES724e7701f0d4        centos              &quot;/bin/bash&quot;         5 minutes ago       Up 5 minutes                                      yufei_6f9097691663e        centos              &quot;/bin/bash&quot;         6 minutes ago       Up 6 minutes                                      yufei_5e59a540fb979        centos              &quot;/bin/base&quot;         6 minutes ago       Created                                           yufei_4ff49dfedea4f        centos              &quot;/bin/bash&quot;         2 hours ago         Exited (137) 10 minutes ago                       yufei_03d2cc70abb5a5        centos              &quot;/bin/bash&quot;         2 hours ago         Exited (127) 2 hours ago                          yufei_022d48fc5b7c17        centos              &quot;/bin/bash&quot;         2 hours ago         Exited (127) 2 hours ago                          yufei_01[root@localhost ~]# </code></pre><h4 id="5、启动、停止、重启某个docker-容器"><a href="#5、启动、停止、重启某个docker-容器" class="headerlink" title="5、启动、停止、重启某个docker 容器"></a>5、启动、停止、重启某个docker 容器</h4><pre><code>[root@localhost ~]# docker start yufei_01yufei_01[root@localhost ~]# docker stop yufei_01yufei_01[root@localhost ~]# docker restart yufei_01yufei_01[root@localhost ~]# </code></pre><h4 id="6、查看指定容器的日志记录"><a href="#6、查看指定容器的日志记录" class="headerlink" title="6、查看指定容器的日志记录"></a>6、查看指定容器的日志记录</h4><pre><code>[root@back bin]# docker psCONTAINER ID        IMAGE                             COMMAND                  CREATED             STATUS              PORTS                    NAMESbaa114bbd3cd        oddrationale/docker-shadowsocks   &quot;/usr/local/bin/ss...&quot;   28 minutes ago      Up 28 minutes       0.0.0.0:9527-&gt;9527/tcp   eloquent_goldwasser[root@back bin]# docker logs -f baa114bbd3cd</code></pre><h4 id="7、删除某个容器，若正在运行，需要先停止"><a href="#7、删除某个容器，若正在运行，需要先停止" class="headerlink" title="7、删除某个容器，若正在运行，需要先停止"></a>7、删除某个容器，若正在运行，需要先停止</h4><pre><code>[root@localhost ~]# docker rm yufei_01Error response from daemon: You cannot remove a running container 2d48fc5b7c17b01e6247cbc012013306faf1e54f24651d5e16d6db4e15f92d33. Stop the container before attempting removal or use -f[root@localhost ~]# docker stop yufei_01yufei_01[root@localhost ~]# docker rm yufei_01yufei_01[root@localhost ~]# </code></pre><h4 id="8、删除所有容器"><a href="#8、删除所有容器" class="headerlink" title="8、删除所有容器"></a>8、删除所有容器</h4><pre><code>[root@localhost ~]# docker rm $(docker ps -a -q)Error response from daemon: You cannot remove a running container 724e7701f0d4a830167e21f75b470235a0e408fd6cc2913403426e96f69cba11. Stop the container before attempting removal or use -fError response from daemon: You cannot remove a running container f9097691663ee36f9d2ee56afbdcca0eeb8b63e5590ddf18c0c42954c93b9f06. Stop the container before attempting removal or use -f[root@localhost ~]# [root@localhost ~]# [root@localhost ~]# docker stop yufei_6yufei_6[root@localhost ~]# docker stop yufei_5yufei_5[root@localhost ~]# docker rm $(docker ps -a -q)724e7701f0d4f9097691663e[root@localhost ~]# </code></pre><h4 id="9、镜像"><a href="#9、镜像" class="headerlink" title="9、镜像"></a>9、镜像</h4><p>列出镜像:<code>docker image ls</code>或<code>docker images</code><br>列出所有镜像：<code>docker image ls -a</code><br>列出所有镜像：<code>docker images -a</code><br>查看镜像、容器、数据卷所占用的空间:<code>docker system df</code><br>删除镜像:<code>docker image rm</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> linux </tag>
            
            <tag> ss </tag>
            
            <tag> docker </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacBook Pro休眠掉电问题</title>
      <link href="/2019/01/25/MacBook%20Pro%E4%BC%91%E7%9C%A0%E6%8E%89%E7%94%B5%E9%97%AE%E9%A2%98/"/>
      <url>/2019/01/25/MacBook%20Pro%E4%BC%91%E7%9C%A0%E6%8E%89%E7%94%B5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol><li>重启 <strong>Macbook</strong>，在启动的时候按住 <code>command + R</code>，然后系统会尽入 <strong>recovery</strong> 模式。</li><li>选择语言，点下一步，然后在菜单栏选择打开 <strong>terminal</strong>。</li><li>输入 <code>csrutil disable</code> 禁掉 <strong>SIP</strong>，然后正常重启 <strong>macbook</strong>。</li><li>打开 <strong>terminal</strong>，输入 <code>ioreg -l | grep board-id</code> 查看你的 <strong>board-id</strong>，</li><li>在这个目录 <code>/System/Library/Extensions/IOPlatformPluginFamily.kext/Contents/PlugIns/X86PlatformPlugin.kext/Contents/Resources</code> 下面找到你的 <strong>board-id</strong> 对应的 <strong>.plist</strong> 文件</li><li>用管理员账户编辑上一步中的 <strong>plist</strong> 文件，比如 <code>sudo vim Mac-2BD2C31983FE1634.plist</code></li><li><p>把 <code>TCPKeepAliveDuringSleep</code> 修改为 <code>false</code>, 然后保存</p><pre><code>&lt;key&gt;TCPKeepAliveDuringSleep&lt;/key&gt;&lt;false/&gt;&lt;key&gt;NotificationWake&lt;/key&gt;&lt;false/&gt;&lt;key&gt;DNDWhileDisplaySleeps&lt;/key&gt;&lt;true/&gt;</code></pre></li><li>重启 mac，按照第 1，2 步进入 <strong>recovery</strong> 模式，开启 <code>SIP，csrutil enable</code>。</li><li>正常重启 mac，就可以了。可以用这个命令 <code>ioreg -l | grep IOPlatformFeatureDefaults</code> 来查看修改后的状态。</li></ol>]]></content>
      
      
      <categories>
          
          <category> MacBook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 技巧 </tag>
            
            <tag> MacBook </tag>
            
            <tag> 电量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome 原生工具进行网页长截图</title>
      <link href="/2019/01/25/Chrome%20%E5%8E%9F%E7%94%9F%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE/"/>
      <url>/2019/01/25/Chrome%20%E5%8E%9F%E7%94%9F%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<ol><li>首先按下 <code>⌘Command + ⌥Option + I</code>（Windows 为 <code>F12</code>）快捷键，召唤出调试界面。</li></ol><p><img src="/2019/01/25/Chrome 原生工具进行网页长截图/1553737809259.png" alt="1553737809259"></p><ol start="2"><li>随后，按下 <code>⌘Command + ⇧Shift + P</code>（Windows 为 <code>Ctrl + Shift + P</code>），输入命令 <code>Capture full size screenshot</code>（只输前几个字母就能找到），敲下回车，Chrome 就会自动截取整个网页内容并保存至本地。由于是渲染引擎直接输出，其比普通扩展速度更快，分辨率也更高。</li></ol><p><img src="/2019/01/25/Chrome 原生工具进行网页长截图/1553737866246.png" alt="1553737866246"></p><ol start="3"><li>除了普通长截图以外，你还可以利用这一功能截取手机版网页长图。只需要按下 <code>⌘Command + ⇧Shift + M</code> （Windows 为 <code>Ctrl + Shift + M</code>）模拟移动设备，再按刚才的方法运行命令就可以了。在顶部的工具栏中，你可以选择要模拟的设备和分辨率等设置。</li></ol><p><img src="/2019/01/25/Chrome 原生工具进行网页长截图/1553737909027.png" alt="1553737909027"></p><ol start="4"><li>如果你想准确截取网页的某一部分，可以按下 <code>⌘Command + ⇧Shift + C</code>（Windows 为 <code>Ctrl + Shift + C</code>）嗅探元素。选中想要的部分后，再运行 <code>Capture node screenshot</code> 命令，一张完美的选区截图就诞生了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Chrome </tag>
            
            <tag> 技巧 </tag>
            
            <tag> 截图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 最常用的几个命令</title>
      <link href="/2019/01/25/Hexo%20%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/01/25/Hexo%20%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo-约有二十个命令，但普通用户经常使用的大概只有下列几个"><a href="#Hexo-约有二十个命令，但普通用户经常使用的大概只有下列几个" class="headerlink" title="Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:"></a>Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:</h3><h4 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h4><pre><code>hexo s</code></pre><p>启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>hexo s 是 hexo server 的缩写，命令效果一致；<br>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；<br>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</p><h4 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h4><pre><code>hexo new &quot;学习笔记  六&quot;</code></pre><p>新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。</p><p>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。</p><h4 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h4><pre><code>hexo d</code></pre><p>自动生成网站静态文件，并部署到设定的仓库。</p><p>hexo d 是 hexo deploy 的缩写，命令效果一致。</p><h4 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h4><pre><code>hexo clean</code></pre><p>清除缓存文件 db.json 和已生成的静态文件 public 。</p><p>网站显示异常时可以执行这条命令试试。</p><h4 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h4><pre><code>hexo g</code></pre><p>生成网站静态文件到默认设置的 public 文件夹。</p><p>便于查看网站生成的静态文件或者手动部署网站；<br>如果使用自动部署，不需要先执行该命令；<br>hexo g 是 hexo generate 的缩写，命令效果一致。</p><h4 id="hexo-new-page"><a href="#hexo-new-page" class="headerlink" title="hexo new page"></a>hexo new page</h4><pre><code>hexo new page aboutme</code></pre><p>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/</p><p>标题可以为中文，但一般习惯用英文；<br>页面标题和文章一样可以随意修改；<br>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</p><h4 id="md文章格式"><a href="#md文章格式" class="headerlink" title="md文章格式"></a>md文章格式</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="string">最常用的几个命令</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-01</span><span class="bullet">-25</span> <span class="number">16</span><span class="string">:25:50</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[随笔,Hexo,学习,命令]</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 学习 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2019/01/24/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/01/24/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/24/Linux常用命令/下载.jpg" alt="下载"></p><a id="more"></a><h2 id="linux命令很多，但是常用的也就那么多，记录一些liunx常用的命令"><a href="#linux命令很多，但是常用的也就那么多，记录一些liunx常用的命令" class="headerlink" title="linux命令很多，但是常用的也就那么多，记录一些liunx常用的命令"></a>linux命令很多，但是常用的也就那么多，记录一些liunx常用的命令</h2><h3 id="tab"><a href="#tab" class="headerlink" title="tab"></a>tab</h3><blockquote><p><code>tab</code>不是命令，是键盘上的tab键，这个虽然不是命令但是很重要，可以帮你补全文件信息和路径信息，减少手打产生的错误，例如你要进入到<code>/usr/local</code>,你使用<code>cd /u</code>然后按tab就会自动帮你打出<code>cd /usr</code>,如果你不知道/usr目录下有哪些文件夹，你可以连续按两次tab，就会在保留当前<code>cd /usr</code>的命令下并显示出/usr下的文件</p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553734757195.png" alt="1553734757195"></p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><blockquote><p>进入文件夹，比如 <code>cd /home</code> , <code>cd /usr/data</code></p></blockquote><blockquote><p><code>cd ..</code> 的意思是返回上一级</p></blockquote><blockquote><p><code>cd ./path</code>  切换到当前目录下的path目录中，“.”表示当前目录</p></blockquote><blockquote><p><code>cd ../path</code>  切换到上层目录中的path目录中，“..”表示上一层目录</p></blockquote><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><blockquote><p>查看当前目录路径</p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553734788156.png" alt="1553734788156"></p><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><blockquote><p>查看当前目录下的所有文件</p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553734806577.png" alt="1553734806577"></p><h3 id="ll"><a href="#ll" class="headerlink" title="ll"></a>ll</h3><blockquote><p>也是查看当前目录下所有文件，不过这个显示每个文件的详情</p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553734820852.png" alt="1553734820852"></p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><blockquote><p>复制命令，例如：<code>cp test.txt test1.txt</code> 复制<strong>test.txt</strong>文件为<strong>test1.txt</strong></p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553734880632.png" alt="1553734880632"></p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><blockquote><p>新建文件夹命令，例：<code>mkdir 111</code></p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553734915317.png" alt="1553734915317"></p><h3 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi,vim"></a>vi,vim</h3><blockquote><p><code>vi</code> 是linux自带的文本编辑命令，<code>vim</code>是<code>vi</code>的升级版，<code>vim</code>命令需要安装才有，可以使用这两个命令编辑文本，例如：<code>vi test.txt</code></p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553735737732.png" alt="1553735737732"></p><blockquote><p>就会进入文本编辑模式，但是这个时候你是没法编辑的，如果你要开始编辑你需要先输入字母 <code>a</code> 激活编辑模式。</p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553735757100.png" alt="1553735757100"></p><blockquote><p>下面有<code>INSERT</code>字样提示你可以编辑</p></blockquote><blockquote><p>当你编辑完成后可以按 <code>Esc</code> 退出编辑模式<br>如果你要保存你需要直接输入 <code>:wq</code> 并回车,如果放弃保存 直接输入 <code>:q</code> 并回车</p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553735783664.png" alt="1553735783664"></p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><blockquote><p>预览模式查看文件，例：<code>cat test.txt</code> ,直接显示文本内信息，但是不能编辑</p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553735824423.png" alt="1553735824423"></p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><blockquote><p>移动命令，将文件已到另一个文件夹，例：<code>mv test.txt /home/data/111/</code></p></blockquote><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><blockquote><p>删除命令，慎用，linux没有回收站功能，删除之前要看仔细了再操作，例如 <code>rm test.txt</code></p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553735860662.png" alt="1553735860662"></p><blockquote><p>删除文件夹和文件夹内的文件需要用 <code>rm -rf</code></p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553735924305.png" alt="1553735924305"></p><h3 id="ps-ef"><a href="#ps-ef" class="headerlink" title="ps -ef"></a>ps -ef</h3><blockquote><p><code>ps -ef</code>是查看进程的命令，通常需要搭配 <code>grep</code> 一起用，例如查看当前服务器上java进程，<code>ps -ef|grep java</code></p></blockquote><p><img src="/2019/01/24/Linux常用命令/1553735967294.png" alt="1553735967294"></p><blockquote><p>就会显示所有的java进程，每个进程的执行目录也有，如果你想找一台服务器上的某个服务文件路径，就可以使用这个命令查看之后找到路径</p></blockquote><h3 id="netstat-tunlp"><a href="#netstat-tunlp" class="headerlink" title="netstat -tunlp"></a>netstat -tunlp</h3><blockquote><p>Linux netstat命令用于显示网络状态。</p><p>利用netstat指令可让你得知整个Linux系统的网络情况</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-a或--all 显示所有连线中的Socket。</span><br><span class="line">-A&lt;网络类型&gt;或--&lt;网络类型&gt; 列出该网络类型连线中的相关地址。</span><br><span class="line">-c或--continuous 持续列出网络状态。</span><br><span class="line">-C或--cache 显示路由器配置的快取信息。</span><br><span class="line">-e或--extend 显示网络其他相关信息。</span><br><span class="line">-F或--fib 显示FIB。</span><br><span class="line">-g或--groups 显示多重广播功能群组组员名单。</span><br><span class="line">-h或--help 在线帮助。</span><br><span class="line">-i或--interfaces 显示网络界面信息表单。</span><br><span class="line">-l或--listening 显示监控中的服务器的Socket。</span><br><span class="line">-M或--masquerade 显示伪装的网络连线。</span><br><span class="line">-n或--numeric 直接使用IP地址，而不通过域名服务器。</span><br><span class="line">-N或--netlink或--symbolic 显示网络硬件外围设备的符号连接名称。</span><br><span class="line">-o或--timers 显示计时器。</span><br><span class="line">-p或--programs 显示正在使用Socket的程序识别码和程序名称。</span><br><span class="line">-r或--route 显示Routing Table。</span><br><span class="line">-s或--statistice 显示网络工作信息统计表。</span><br><span class="line">-t或--tcp 显示TCP传输协议的连线状况。</span><br><span class="line">-u或--udp 显示UDP传输协议的连线状况。</span><br><span class="line">-v或--verbose 显示指令执行过程。</span><br><span class="line">-V或--version 显示版本信息。</span><br><span class="line">-w或--raw 显示RAW传输协议的连线状况。</span><br><span class="line">-x或--unix 此参数的效果和指定"-A unix"参数相同。</span><br><span class="line">--ip或--inet 此参数的效果和指定"-A inet"参数相同。</span><br></pre></td></tr></table></figure><h3 id="kill-9"><a href="#kill-9" class="headerlink" title="kill -9"></a>kill -9</h3><blockquote><p>结束某个进程，结束一个进程你需要知道进程的<code>pid</code>，用<code>ps -ef</code>和<code>netstat -tunlp</code>都可以看到进程的pid，例如关闭一个进程：<code>kill -9 1162</code></p></blockquote><blockquote><p>linux命令都不难，常用的几个记住就行，最主要是要多敲，熟能生巧而已，还有些其他命令比如解压缩打包或者启动服务的命令，具体要看你是什么格式的压缩包和什么样的服务，不同的服务启动命令不一样，具体情况具体看就好</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> linux </tag>
            
            <tag> 学习 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode Intergrated Teiminal 集成终端</title>
      <link href="/2019/01/23/vscode%E9%85%8D%E7%BD%AE%E7%B1%BB%E4%BC%BClinux%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2019/01/23/vscode%E9%85%8D%E7%BD%AE%E7%B1%BB%E4%BC%BClinux%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>windows没有<code>ls</code>,<code>pwd</code>等类似linux的命令，着实不方便，虽然有<code>mkdir</code>，但是用习惯了linux会觉得很奇怪，强大的vscode居然有这种插件可以解决，记一下安装方法：</p><p>环境：windows7</p><ol><li>设置-搜索 <code>terminal.integrated.shellArgs.osx</code></li><li><p><strong>工作区设置</strong>或<strong>用户设置</strong>配置</p><pre><code>{    &quot;terminal.integrated.shell.windows&quot;: &quot;C:/Program Files/Git/bin/bash.exe&quot;,    &quot;explorer.confirmDelete&quot;: false}</code></pre></li><li><p>保存会提示重启，<code>ctrl</code> + <code>shift</code> + <code>~</code> 启动终端面板</p></li></ol><p><img src="/2019/01/23/vscode配置类似linux命令行/1553734363923.png" alt="1553734363923"></p>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> linux </tag>
            
            <tag> 配置 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ss的一些配置和命令</title>
      <link href="/2019/01/23/ss%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/01/23/ss%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="ss命令"><a href="#ss命令" class="headerlink" title="ss命令"></a>ss命令</h2><p>后台运行：<code>ssserver -c /etc/shadowsocks.json -d start</code></p><p>后台停止：<code>ssserver -c /etc/shadowsocks.json -d stop</code></p><p>前台运行：<code>ssserver -c /etc/shadowsocks/config.json</code></p><p>修改配置：</p><pre><code>vi /etc/shadowsocks.json</code></pre><p>SSR:</p><p>管理界面：<code>bash ssr.sh</code></p><p>锐速命令：</p><p>启动：</p><pre><code>service serverSpeeder start</code></pre><p>关闭：</p><pre><code>service serverSpeeder stop</code></pre><p>状态：</p><pre><code>service serverSpeeder status</code></pre><p>开启防火墙端口：</p><h3 id="端口号是你自己设置的端口"><a href="#端口号是你自己设置的端口" class="headerlink" title="端口号是你自己设置的端口"></a>端口号是你自己设置的端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> firewall-cmd --permanent --zone=public --add-port=443/tcp</span><br><span class="line"><span class="meta">$</span> firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> linux </tag>
            
            <tag> ss </tag>
            
            <tag> 配置 </tag>
            
            <tag> shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo加上动态看板娘</title>
      <link href="/2019/01/23/hexo%20%E6%B7%BB%E5%8A%A0live2d%E7%9C%8B%E6%9D%BF%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/01/23/hexo%20%E6%B7%BB%E5%8A%A0live2d%E7%9C%8B%E6%9D%BF%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-添加live2d看板动画"><a href="#hexo-添加live2d看板动画" class="headerlink" title="hexo 添加live2d看板动画"></a>hexo 添加live2d看板动画</h2><h3 id="首先贴出官网代码"><a href="#首先贴出官网代码" class="headerlink" title="首先贴出官网代码"></a>首先贴出官网代码</h3><p>官网地址配置：<a href="https://www.npmjs.com/package/hexo-helper-live2d" target="_blank" rel="noopener">https://www.npmjs.com/package/hexo-helper-live2d</a></p><p><strong>遇到问题：</strong></p><ol><li>替换主题，在项目跟目录创建文件夹<code>live2d_models</code>,在<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">这里选择你喜欢的妹子</a> 然后去<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">这里</a>找到对应的安装包文件名，先贴一下免得下次找：</li></ol><p>安装插件：<code>npm install --save hexo-helper-live2d</code></p><ul><li></li><li>live2d-widget-model-chitose</li><li>live2d-widget-model-epsilon2_1</li><li>live2d-widget-model-gf</li><li>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)</li><li>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)</li><li>live2d-widget-model-haruto</li><li>live2d-widget-model-hibiki</li><li>live2d-widget-model-hijiki</li><li>live2d-widget-model-izumi</li><li>live2d-widget-model-koharu</li><li>live2d-widget-model-miku</li><li>live2d-widget-model-ni-j</li><li>live2d-widget-model-nico</li><li>live2d-widget-model-nietzsche</li><li>live2d-widget-model-nipsilon</li><li>live2d-widget-model-nito</li><li>live2d-widget-model-shizuku</li><li>live2d-widget-model-tororo</li><li>live2d-widget-model-tsumiki</li><li>live2d-widget-model-unitychan</li><li>live2d-widget-model-wanko</li><li>live2d-widget-model-z16</li></ul><p>安装主题：<code>npm install live2d-widget-model-chitose</code></p><p>在主题_config.yml的参数配置贴一下：</p><pre><code># Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d:  enable: true  # enable: false  scriptFrom: local # 默认  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径  pluginModelPath: assets/ # 模型文件相对与插件根目录路径  # scriptFrom: jsdelivr # jsdelivr CDN  # scriptFrom: unpkg # unpkg CDN  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中  debug: false # 调试, 是否在控制台输出日志  model:    use: live2d-widget-model-haruto # npm-module package name    # use: wanko # 博客根目录/live2d_models/ 下的目录名    # use: ./wives/wanko # 相对于博客根目录的路径    # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url  display:    superSample: 2    width: 100    height: 150    position: right    hOffset: 0    vOffset: -0  mobile:    show: true    scale: 0.1 </code></pre>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录搭建博客遇到的一些问题</title>
      <link href="/2019/01/22/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/01/22/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol><li>git和hexo两者的git处理方式不一样，通过hexo提交的话不会提交源码只会提交编译后的html，所以一旦源码丢失那就gg了</li><li>hexo环境的搭建，这个自己百度，很简单</li><li>我喜欢的next主题配置，参见：<a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">https://www.jianshu.com/p/9f0e90cc32c2</a></li><li><a href="http://jekyllthemes.org/page4/" title="jekyll模板" target="_blank" rel="noopener">jekyl</a>l博客也是很不错的，可以直接上传markdown文件生成文章，相对hexo来说是要方便一点，但是犹豫hexo的驱动比较牛逼，我比较喜欢炫酷的效果所以还是选择了hexo</li><li>评论系统采用的是Valine，gitment有bug，经常js报错很难受，gitalk也是,Disqus需要翻墙，相对来说<a href="https://leancloud.cn/" target="_blank" rel="noopener">Valine</a>最合适，不需要登录就可以评论</li></ol><p>好了就写这么多，搭建的过程虽然网上有很多教程，但是还是会遇到一些npm node 之类的错误，自己还是要多查多思考，也没那么难</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
