<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[redis设计键让其映射到同一个slot]]></title>
    <url>%2F2020%2F06%2F28%2Fredis%E8%AE%BE%E8%AE%A1%E9%94%AE%E8%AE%A9%E5%85%B6%E6%98%A0%E5%B0%84%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AAslot%2F</url>
    <content type="text"><![CDATA[redis设计键让其映射到同一个slot123456jedisCluster.sadd("&#123;jay&#125;aaa","71","73");jedisCluster.sadd("&#123;jay&#125;bbb","72","73");Set&lt;String&gt; set = jedisCluster.sinter("&#123;jay&#125;qqqq","&#123;jay&#125;ssss");System.out.println(JedisClusterCRC16.getSlot("&#123;jay&#125;qqqq"));System.out.println(JedisClusterCRC16.getSlot("&#123;jay&#125;ssss")); 解释：redis在使用hash算法将键映射到slot时，只会计算{}里面的内容，若{}内的内容相同，则将键映射到同一个slot 例子中{}内容均为materialType，这样在JedisClusterCRC16.getSlot(key）时得到相同的slot编码号。 这样就可以使用jedisCluster.sinter（key1,key2）方法取交集，避免了键在不同的slot时，该方法报错 起因： 批量删除redis key时如果key不在同一个solt内，会报错]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Cloudflare中转V2Ray流量]]></title>
    <url>%2F2019%2F06%2F12%2F%E4%BD%BF%E7%94%A8Cloudflare%E4%B8%AD%E8%BD%ACV2Ray%E6%B5%81%E9%87%8F%2F</url>
    <content type="text"><![CDATA[担心 IP 被墙？或者不想 IP 被墙？是的！使用 Cloudflare 来中转 V2Ray 的 WebSocket 流量就行！由于使用了 Cloudflare 中转，所以墙根本不知道背后的 IP 是多少，你可以愉快的玩耍了~ 提醒如果你不是使用 移动宽带 的用户，那么使用 Cloudflare 中转的速度相对来说是比较慢的，这个是因为线路的问题，无解。警告警告警告该教程目前写得比较简陋，以后应该会增加详细图文教程V2Ray 的 WS + TLS 不是神话，如果你没学会走路就不要急着跑大佬。。。你如果是从来没接触过 V2Ray 的人一上来就开玩 WS + TLS你真的不怕摔跤吗你有解析过域名吗，知道什么是 A 记录吗，会修改 NS 吗。。如果不懂，那就先补上这些知识再往下看如果实在想玩 WS + TLS，请认认真真看教程教程真的写得比较简陋，如果实在折腾不成功，那也很正常的，改天再来或者直接放弃 这是一个提示真是无聊，折腾啥啊。买个搬瓦工 Just My Socks 先凑合用着就可以了，被墙自动换 IP，无须担心 IP 被墙！其他的等风声过了再说了，套什么 CF，速度慢到怀疑人生。 准备一个域名，建议使用免费域名确保域名已经可以在 Cloudflare 正常使用。在 Cloudflare 的 Overview 选项卡可以查看域名状态，请确保为激活状态，即是： Status: Active怎么 SSH 连接上被墙的 IP ? Xshell 在属性那里可以设置代理，或者你可以在一台没有被墙的境外 VPS 使用 iptables 转发数据到被墙的机器上，此处不细说了。 添加域名解析在 DNS 选项卡那边添加一个 A 记录的域名解析，假设你的域名是 233blog.com，并且想要使用 www.233blog.com 作为翻墙的域名那么在 DNS 那里配置，Name 写 www，IPv4 address 写你的 VPS IP，务必把云朵点灰，然后选择 Add Record 来添加解析记录即可(如果你已经添加域名解析，请务必把云朵点灰，即是 DNS only) OK，确保操作没有问题的话，继续 安装 V2Ray 如果你已经使用本人提供的 V2Ray 一键安装脚本并安装了 V2Ray，那就直接输入 v2ray config修改传输协议为 WebSocket + TLS 如果你并没有使用本站提供的 V2Ray 一键安装脚本来安装 V2Ray那么现在开始使用吧，最好用的 V2Ray 安装脚本，保证你满意使用 root 用户输入下面命令安装或卸载 1bash &lt;(curl -s -L https://git.io/v2ray.sh) 如果提示 curl: command not found ，那是因为你的小鸡没装 Curlubuntu/debian 系统安装 Curl 方法: apt-get update -y &amp;&amp; apt-get install curl -ycentos 系统安装 Curl 方法: yum update -y &amp;&amp; yum install curl -y安装好 curl 之后就能安装脚本了 之后选择安装，传输协议选择 WebSocket + TLS (即是选择 4 )，V2Ray 端口随便，不要是 80 和 443 即可，然后输入你的域名，域名解析 Y ，自动配置 TLS 也是 Y ，其他就默认吧，一路回车。等待安装完成如果你的域名没有正确解析，安装会失败，解析相关看上面的 添加域名解析 安装完成后会展示 V2Ray 的配置信息，并且会询问是否生成二维码等，不用管它，直接回车 然后输入 v2ray status 查看一下运行状态，请确保 V2Ray 和 Caddy 都在运行 如果没有问题的话，继续 设置 Crypto 和 开启中转确保 Cloudflare 的 Crypto 选项卡的 SSL 为 Full并且请确保 SSL 选项卡有显示 Universal SSL Status Active Certificate 这样的字眼，如果你的 SSL 选项卡没有显示这个，不要急，只是在申请证书，24 小时内可以搞定。 然后在 DNS 选项卡那里，把刚才点灰的那个云朵图标，点亮它，一定要点亮一定要点亮一定要点亮 云朵图标务必为橙色状态，即是 DNS and HTTP proxy(CDN) V2Ray 配置信息很好，现在接下来配置客户端使用输入 v2ray info 即可查看 V2Ray 的配置，如果你有使用某些 V2Ray 客户端，可以根据给出的配置的信息来配置使用了。赶紧测试吧 V2Ray 客户端使用教程：WindowsV2RayN使用教程 什么鬼？对啊，就是如此简单啊，要不然你以为啊。 备注如果你的 VPS 位置是在美国西海岸的话，速度应该还算可以吧，如果不是在美国西海岸，那么也许速度会很慢，不过好在不用担心 IP 被墙或者能让被墙的 IP 重生也挺好的。难道不是么？如果你使用移动网络的话，那么 Cloudflare 的中转节点可能会在香港，速度也许会不错 (不完全保证)。 无限域名备用懒得写了，自己悟吧…反正绝大多数人只要知道怎么把墙的 IP 救活就行…算啦，我还是提示一下吧，WebSocket 协议，80 端口，Cloudflare 的 Crypto 选项卡 SSL 为 Flexible如果没有太多必要，不需要折腾这 结束哇，没有图文教程你就看不懂的话，我能怎么办，我也很绝望，我更加迷茫 转自：https://github.com/233boy/v2ray/wiki/%E4%BD%BF%E7%94%A8Cloudflare%E4%B8%AD%E8%BD%ACV2Ray%E6%B5%81%E9%87%8F]]></content>
      <categories>
        <category>ss</category>
      </categories>
      <tags>
        <tag>ss</tag>
        <tag>v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[V2Ray一键安装脚本]]></title>
    <url>%2F2019%2F06%2F12%2FV2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[支持 V2Ray 绝大多数传输协议，WebSocket + TLS，HTTP/2，Shadowsocks，动态端口，集成 BBR 和锐速优化等。 前言V2Ray 官网：https://www.v2ray.com V2Ray 是一个于 Shadowsocks 之后非常好用的代理软件，但是由于 V2Ray 的配置略复杂，GUI 客户端不完善，所以 V2Ray 并没有像 Shadowsocks 在科学上网人群之中那么流行。不过我想，像我这种小小白萌新，更需要的是一个好用的一键安装脚本……所以，此脚本是为了方便像我这种小小白萌新更加容易去使用 V2Ray，配置 V2Ray。希望对你有帮助 ^_^ 如果你是毫无经验的小白，搭建 V2Ray 请看此教程：V2Ray搭建详细图文教程 温馨提示特么这个脚本没有挖矿，没有挖矿，没有挖矿。 我很抱歉……认真的开了个玩笑脚本是开源的，开源地址： https://github.com/233boy/v2ray 功能特点 支持 V2Ray 多数传输协议 支持 WebSocket + TLS / HTTP/2 支持 动态端口 (WebSocket + TLS，Socks5， HTTP/2 除外) 支持 屏蔽广告 支持 配置 Shadowsocks 支持 下载客户端配置文件 (不用 Xshell 也可以下载) 客户端配置文件同时支持 SOCKS 和 HTTP 支持 生成 V2Ray 配置二维码链接 (仅适用部分客户端) 支持 生成 V2Ray 配置信息链接 支持 生成 Shadowsocks 配置二维码链接 支持修改 V2Ray 传输协议 支持修改 V2Ray 端口 支持修改 动态端口 支持修改 用户ID 支持修改 TLS 域名 支持修改 Shadowsocks 端口 支持修改 Shadowsocks 密码 支持修改 Shadowsocks 加密协议 自动启用 BBR 优化 (如果内核支持) 集成可选安装 BBR (by teddysun.com) 集成可选安装 锐速 (by moeclub.org) 一键 查看运行状态 / 查看配置信息 / 启动 / 停止 / 重启 / 更新 / 卸载 / 等等… 人性化向导 &amp; 纯净安装 &amp; 卸载彻底 安装或卸载 温馨提醒，此脚本默认屏蔽一些不友好的网站！(仅限轮子相关) 要求：Ubuntu 16+ / Debian 8+ / CentOS 7+ 系统推荐使用 Debian 9 系统，脚本会自动启用 BBR 优化。备注：不推荐使用 Debian 8 系统，因为 Caddy 申请证书可能会出现一些莫名其妙的问题强烈推荐使用 搬瓦工VPS，稳定，快速，针对中国线路专门优化，完全无须担心跑路，服务好，30天退款保证。在这里可以找到 搬瓦工 VPS 套餐大全 ，优惠码在这里： 搬瓦工 VPS 优惠码使用 root 用户输入下面命令安装或卸载 1bash &lt;(curl -s -L https://git.io/v2ray.sh) 如果提示 curl: command not found ，那是因为你的 VPS 没装 Curlubuntu/debian 系统安装 Curl 方法: apt-get update -y &amp;&amp; apt-get install curl -ycentos 系统安装 Curl 方法: yum update -y &amp;&amp; yum install curl -y安装好 curl 之后就能安装脚本了 备注：安装完成后，输入 v2ray 即可管理 V2Ray如果提示你的系统不支持此脚本，那么请尝试更换系统 下面是此脚本的一些截图 安装选项 配置 Shadowsocks 安装完成 管理面板 Telegram 专用代理如果你在使用 Telegram 的话，你可以配置一个 Telegram 的专用代理，这样来，在某些情况下你就不需要再开一个代理软件了。输入 v2ray tg 即可配置 TG 专用代理配置 Telegram MTProto Telegram MTProto 配置信息 快速管理v2ray info 查看 V2Ray 配置信息v2ray config 修改 V2Ray 配置v2ray link 生成 V2Ray 配置文件链接v2ray infolink 生成 V2Ray 配置信息链接v2ray qr 生成 V2Ray 配置二维码链接v2ray ss 修改 Shadowsocks 配置v2ray ssinfo 查看 Shadowsocks 配置信息v2ray ssqr 生成 Shadowsocks 配置二维码链接v2ray status 查看 V2Ray 运行状态v2ray start 启动 V2Rayv2ray stop 停止 V2Rayv2ray restart 重启 V2Rayv2ray log 查看 V2Ray 运行日志v2ray update 更新 V2Rayv2ray update.sh 更新 V2Ray 管理脚本v2ray uninstall 卸载 V2Ray 配置文件路径V2Ray 配置文件路径：/etc/v2ray/config.jsonCaddy 配置文件路径：/etc/caddy/Caddyfile脚本配置文件路径: /etc/v2ray/233blog_v2ray_backup.conf 警告，请不要修改脚本配置文件，免得出错。。如果你不是有特别的需求，也不要修改 V2Ray 配置文件不过也没事，若你实在想要瞎折腾，出错了的话，你就卸载，然后重装，再出错 ，再卸载，再重装，重复到自己不再想折腾为止。。 WS+TLS / HTTP2如果你使用了这两个协议，那么就会使用了脚本自带的 Caddy 集成不管如何，不建议直接去更改 Caddy 的配置：/etc/caddy/Caddyfile如果你需要配置其他网站相关，请将网站的配置文件放到 /etc/caddy/sites 目录下，然后重启 Caddy 进程即可，脚本默认生成的 Caddy 的配置会加载 /etc/caddy/sites 这个目录下的所有配置文件。所以，请将你的网站配置文件放到 /etc/caddy/sites 目录下，完完全全不需要去更改 /etc/caddy/Caddyfile记得重启 Caddy 进程：service caddy restart Caddy 插件相关本脚本集成了 Caddy，但不集成任何 Caddy 插件，如果你需要安装某些 Caddy 插件，你可以使用官方的 Caddy 安装脚本来一键安装。本人的脚本集成的 Caddy 的安装路径，跟 Caddy 官方的安装脚本是一致的。所以可以直接安装，不会有任何问题 举个例子，安装包含 http.filebrowser 插件的 Caddy，执行如下命令即可 1curl https://getcaddy.com | bash -s personal http.filebrowser 你可以在 https://caddyserver.com/download 找到 Caddy 更多插件和安装命令。 备注V2Ray 客户端配置文件 SOCKS 监听端口为 2333， HTTP 监听端口为 6666可能某些 V2Ray 客户端的选项或描述略有不同，但事实上，此脚本显示的 V2Ray 配置信息已经足够详细，由于客户端的不同，请对号入座。 备份为了避免由于不可抗拒的原因所造成本人主动删除脚本，所以建议请将本脚本 Fork 一份备份地址： https://github.com/233boy/v2ray/fork 安装方法，确保你已经 Fork 了脚本，将 233boy 修改成你的 Github 用户名 1234git clone https://github.com/233boy/v2ray -b mastercd v2raychmod +x install.sh./install.sh local 如果提示 git 命令不可用，那就自己安装咯，不会安装啊？我也不知道啊。哈哈 及时更新脚本为确保你能愉快使用，请留意使用 v2ray update.sh 命令来更新管理脚本。脚本难免会有 BUG，所以建议有空就检查一下更新情况。 转自：https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC]]></content>
      <categories>
        <category>ss</category>
      </categories>
      <tags>
        <tag>ss</tag>
        <tag>v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[女朋友问我怎么实现后端校验验证码]]></title>
    <url>%2F2019%2F05%2F09%2F%E5%A5%B3%E6%9C%8B%E5%8F%8B%E9%97%AE%E6%88%91%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%90%8E%E7%AB%AF%E6%A0%A1%E9%AA%8C%E9%AA%8C%E8%AF%81%E7%A0%81%2F</url>
    <content type="text"><![CDATA[风和日丽的早上开车和女朋友一起上班，说道一些有的没的技术，突然女朋友问我怎么实现后端校验验证码，我之前是看过一点别人写的逻辑，支支吾吾的结果没讲清楚，女朋友说我装逼失败，这怎么能忍，于是奋发图强学校了一下我们公司大佬的逻辑，原来核心就是开源的kaptcha。先来一段官方介绍，用来表示这是一篇技术博客： Kaptcha 简介Kaptcha 是一个非常实用的验证码生成工具，它是基于SimpleCaptcha的开源项目。通过调整Kaptcha配置可以生成各种样式的验证码。 使用Kaptcha可以方便的配置以下细节： 验证码的字体 验证码字体的大小 验证码字体的字体颜色 验证码内容的范围 验证码图片的大小，边框，边框粗细，边框颜色 验证码的干扰线 验证码的样式 好了，正式完了就开始说一下实现思路吧，其实也挺简单 前端请求后台接口，后台随机生成一个uuid给前端 前端拿到uuid之后，通过这个uuid请求后台，后台通过uuid生成一张验证码图片返给前端 [^这里说一下后端的实现：其实这个uuid是为了和图片做绑定而产生的，在数据库的表示如下图所示]: 登录校验验证码：用户登录填写账号、密码、验证码，带着uuid （重点：带着uuid，这个uuid其实就相当于这张图片验证码的一个识别，只有带着这个，后台才知道你用的是哪张验证码，才有办法去校验）调用后台登录接口，后台 通过带过来的uuid去查询这张图片验证码的文本验证码是多少，然后比对校验就可以了，是不是很简单。 当然验证码都是有失效时间的，还有验证码用完就删掉啊，这个就不多说了，聪明的人自然会懂，我女朋友那么聪明，应该会懂的 O(∩_∩)O~ 下面的是具体实现代码，留作备用观摩。 12345678910111213141516171819202122232425262728293031323334353637@GetMapping("captcha.jpg")public void captcha(HttpServletResponse response, @RequestParam String uuid) &#123; //1.进入函数 logger.info("-&gt; auth login: generate captcha"); //2 验证uuid格式 if(!TypeValidatorUtil.isUuid(uuid))&#123; logger.info("-- auth login: uuid not valid"); throw new CPException("uuid 不合法"); &#125; //3.response设置 response.setHeader("Cache-Control", "no-store, no-cache"); response.setContentType("image/jpeg"); try&#123; //4.生成图片验证码并将对应uuid和code保存数据库 BufferedImage image = authCaptchaService.getCaptcha(uuid); //5.图片验证码返回到前端 ServletOutputStream out = response.getOutputStream(); ImageIO.write(image, "jpg", out); //6.正常退出函数 logger.info("&lt;- auth login: generate captcha"); //7.关闭连接 IOUtils.closeQuietly(out); &#125;catch (IOException e)&#123; logger.error(e.getMessage()); throw new CPException("IO错误"); &#125;catch (Exception e)&#123; logger.error(e.getMessage()); throw new CPException("获取验证码失败"); &#125;&#125; 1234567891011121314151617@Overridepublic BufferedImage getCaptcha(String uuid) &#123; if(StringUtils.isBlank(uuid))&#123; throw new CPException("uuid不能为空"); &#125; //生成文字验证码 String code = producer.createText(); AuthCaptchaEntity captchaEntity = new AuthCaptchaEntity(); captchaEntity.setUuid(uuid); captchaEntity.setCode(code); //5分钟后过期 captchaEntity.setExpireTime(DateUtil.addDateMinutes(new Date(), 5)); authCaptchaDao.insertCaptcha(captchaEntity); return producer.createImage(code);&#125; 12345&lt;dependency&gt; &lt;groupId&gt;com.github.axet&lt;/groupId&gt; &lt;artifactId&gt;kaptcha&lt;/artifactId&gt; &lt;version&gt;$&#123;kaptcha.version&#125;&lt;/version&gt;&lt;/dependency&gt; 1234567891011121314151617181920/** * 生成验证码配置 * * @author zfan */@Configurationpublic class KaptchaConfig &#123; @Bean public DefaultKaptcha producer() &#123; Properties properties = new Properties(); properties.put(&quot;kaptcha.border&quot;, &quot;no&quot;); properties.put(&quot;kaptcha.textproducer.font.color&quot;, &quot;black&quot;); properties.put(&quot;kaptcha.textproducer.char.space&quot;, &quot;5&quot;); Config config = new Config(properties); DefaultKaptcha defaultKaptcha = new DefaultKaptcha(); defaultKaptcha.setConfig(config); return defaultKaptcha; &#125;&#125; 附： JCaptcha简介 JCapthca是一个开源的用来生成图形验证码的Java开源组件，它非常强大，不光是可以生成图片式的验证码，还可以生成声音式的。 JCaptcha是CAPTCHA里面的一个比较著名的项目。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>kaptcha</tag>
        <tag>女朋友</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初尝java8 lambda表达式]]></title>
    <url>%2F2019%2F04%2F26%2F%E5%88%9D%E5%B0%9Djava8-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[java8新特性之lambda表达式，之前很多面试官都会问java8新特性你了解吗，我会说我知道lambda表达式，但是我还很自豪的说但是我没用过，因为工作中别人也不会用，现在想想说的什么狗屁话，别人不用不代表你不能用啊，我要是面试官估计我也会给你个微笑现在做的项目接口很多，但是难度不大，每天写的和乏味，为了增加点乐趣我特地使用了传说中的 lambda表达式，于是就有了下面的代码: 1234567appList.forEach(app -&gt; &#123; if (starList.contains(app)) &#123; app.put("isStar", true); &#125; else &#123; app.put("isStar", false); &#125;&#125;); 好吧，真的没难度，大佬看见不要笑话可好，溜了]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[typora 快捷键]]></title>
    <url>%2F2019%2F04%2F26%2Ftypora-%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[无序列表：输入-之后输入空格 有序列表：输入数字+“.”之后输入空格 任务列表：-[空格]空格 文字 标题：ctrl+数字 表格：ctrl+t 生成目录：[TOC]按回车 选中一整行：ctrl+l 选中单词：ctrl+d 选中相同格式的文字：ctrl+e 跳转到文章开头：ctrl+home 跳转到文章结尾：ctrl+end 搜索：ctrl+f 替换：ctrl+h 引用：输入&gt;之后输入空格 代码块：ctrl+shift+` 加粗：ctrl+b 倾斜：ctrl+i 下划线：ctrl+u 删除线：alt+shift+5 插入图片：直接拖动到指定位置即可或者ctrl+shift+i 插入链接：ctrl+k]]></content>
      <categories>
        <category>Macdown</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Apple iTunes 下载地址]]></title>
    <url>%2F2019%2F04%2F26%2FApple-iTunes-%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%2F</url>
    <content type="text"><![CDATA[iTunes 最新版 macOS:官网地址,点击下载 Windows 64 bit:官网地址,点击下载 Windows 32 bit:官网地址,点击下载 iTunes 12.6.5 macOS:官网地址,点击下载 →→macOS Mojave 查看这个方法 Windows 64 bit:官网地址,点击下载 Windows 32 bit:官网地址,点击下载 iTunes 12.6.4 macOS:官网地址,点击下载 Windows 64 bit:官网地址,点击下载 Windows 32 bit:官网地址,点击下载 iTunes 12.6.3 macOS:官网地址,点击下载 Windows 64 bit:官网地址,点击下载 Windows 32 bit:官网地址,点击下载 说明 从 iTunes 12.7 开始，Apple 去掉了 App Store 功能，也就无法在电脑上下载和管理 App 安装包，非常不方便。 之后 Apple 又出了 iTunes 12.6.3 特殊版本，重新加入了 App Store 功能，可以下载和管理 App 的 ipa 安装包。 目前 iTunes 12.6.3 又更新至 iTunes 12.6.5 版本，也有App Store 功能。 macOS MojavemacOS Mojave 10.14 上安装 iTunes 12.6 的方法 下载这个文件，双击打开文件，或者使用“脚本编辑器”打开这个文件 (文件下载地址:http://t.cn/E4tLunQ ) 脚本编辑器，点击“运行”按钮(或按快捷键 Command+R)，根据提示操作就行了 大致过程:先删除本机 iTunes，选择 iTunes 12.6 文件，修改文件后再安装 iTunes 12.6 方法来源:http://t.cn/E4txIvq 如果打开 iTunes 12.6 提示无法读取文件“iTunes Library.itl”，因为它是由更高版本的 iTunes 所创建。，点击“退出”按钮，打开文件夹 /用户/cc/音乐/iTunes(cc是用户名)，删除 “iTunes Library.itl” 文件，再 iTunes 12.6 就 OK 了 方法来源：http://t.cn/E4txIvq 转自：&lt;Apple iTunes 下载地址&gt;]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>apple</tag>
        <tag>iTunes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql 之 FIND_IN_SET()]]></title>
    <url>%2F2019%2F04%2F12%2Fmysql-%E4%B9%8B-FIND-IN-SET%2F</url>
    <content type="text"><![CDATA[工作中经常用到一对多，建表时为了方便可能会将多的那方用逗号隔开，但是当查询的时候可能就比较麻烦，今天学到了一个函数，可以直接查看一个数值是否在一段逗号分隔的字符串中 直接看图。]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot 返回apidoc html踩的坑]]></title>
    <url>%2F2019%2F04%2F11%2Fspringboot-%E8%BF%94%E5%9B%9Eapidoc-html%E8%B8%A9%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[项目用apidoc做接口文档，之前一直用的swagger，可是怕我坑惨了 先说下apidoc的搭建，网上教程很多 1234567891011121314151617181920212223241. Install node.jsTo check if node.js is successfully installed:λ node --versionv10.15.02. After node.js installed, install apiDoc.npm install apidoc -gTo check if apiDoc is successfully installed:λ apidoc -hUsage: apidoc [options]Options:......3. Set the apidoc configurations in apidoc.json.4. Write annotations above your functions in your project.5. Generate static api doc files.λ apidoc -i user\ -o user\src\main\webapp\apidoc 无非就是这五个步骤，不多说，执行apidoc -i user\ -o user\src\main\webapp\apidoc 后在webapp下会生成这样的文件： 其实直接点击index.html就可以打开接口文档页面，只是url是本地路径，不方便，部署之后也不方便访问，于是新建一个控制器来调度访问，如下 ​ 1234567891011121314151617@Controller@RequestMapping(value = "/apidoc")public class ApidocController &#123; private static final Logger LOGGER = LoggerFactory.getLogger(ApidocController.class); @RequestMapping(value = "/index") public void index(HttpServletRequest request, HttpServletResponse response) &#123; LOGGER.info("Go to apidoc index page"); try &#123; request.getRequestDispatcher("/apidoc/index.html").forward(request, response); return; &#125; catch (ServletException | IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125; springboot访问HTML需要依赖thymeleaf,在pom.xml加上依赖 ​ 12345&lt;!--thymeleaf template--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; 然后问题来了，用springboot内置tomcat启动项目之后，是死活访问不到静态页面的，不行你可以试试，你会看见可爱的404 网上查了半天没找到原因，可能也就我一个人遇到这个情况吧，然后各种原因查找之后，用外置tomcat启动，发射 ——–&gt; 你就看到它了，具体原因未查明也查不明，不倒腾了，反正线上部署肯定也是外置tomcat，影响不大，end.]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>apidoc</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot入参直接转换时间格式]]></title>
    <url>%2F2019%2F04%2F08%2Fspringboot%E5%85%A5%E5%8F%82%E7%9B%B4%E6%8E%A5%E8%BD%AC%E6%8D%A2%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[##JDK8新增了Localdate和Localdatetime，对时间操作更加方便，springboot入参可直接将string转为时间格式，如下 123456789101112@RequestMapping("/view/list")@ApiOperation("获取用户信息列表")public R list(Integer id, String account, String nickname, @RequestParam(value = "startTime",required = false) @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") LocalDateTime startTime, @RequestParam(value = "endTime",required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate endTime, Integer pageNum, Integer pageSize)&#123; List&lt;UserInfo&gt; list = userInfoService.getList(); return R.ok().put("list",list);&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>入参</tag>
        <tag>date</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nacos注册中心初体验]]></title>
    <url>%2F2019%2F03%2F26%2FNacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%88%9D%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[Nacos注册中心初体验接触SpringCloud以来一直是用 eurrka做注册中心，闭源之后Nacos必然是大趋势，最近空闲刚好尝试一下。 Nacos既可以做注册中心也可以替代spring cloud config统一管理配置，今天只是尝试一下注册中心用法。 搭建与启动服务端搭建服务有两种方式： 1.源码编译：https://github.com/alibaba/nacos/releases 2.直接下载压缩包解压后启动 启动成功后，访问 http://127.0.0.1:8848/nacos 即可看到登录页面，默认账号密码都是nacos 12Linux/Unix/Mac 操作系统，执行命令 sh startup.sh -m standaloneWindows 操作系统，执行命令 cmd startup.cmd 搭建客户端并注册 创建spring boot 项目 配置pom.xml 12345&lt;!-- nacos 的服务注册与发现 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;&lt;/dependency&gt; 12345678910111213141516&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Greenwich.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;version&gt;0.2.1.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; 配置启动类 123456789@SpringBootApplication@EnableDiscoveryClient //加注解public class NacosApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(NacosApplication.class, args); &#125;&#125; 配置 application.yml 12345678910111213141516171819server: port: 8001spring: application: name: test-provider cloud: nacos: discovery: server-addr: 127.0.0.1:8848management: endpoints: web: exposure: include: '*' endpoint: health: # 是否展示健康检查详情 show-details: always 至此，项目启动后在服务端页面便能看到服务已经注册上来了]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>java</tag>
        <tag>Nacos</tag>
        <tag>注册中心</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github每次发布重新绑定域名问题]]></title>
    <url>%2F2019%2F03%2F25%2FGithub%E6%AF%8F%E6%AC%A1%E5%8F%91%E5%B8%83%E9%87%8D%E6%96%B0%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[github搭建的hexo博客可以设置自定义域名，如果不配置的话每次都需要手动设置，每次发布就需要设置一次解决办法：只需要在主题根目录、项目根目录、一级source根目录放置’CNAME’文件即可 另外新装hexo环境下hexo d可能会遇到报错的问题解决办法： 设置_config.yml - auto_detect 为 false 即可.]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7.4搭建shadowsocks]]></title>
    <url>%2F2019%2F03%2F02%2FCentOS7-4%E6%90%AD%E5%BB%BAshadowsocks%2F</url>
    <content type="text"><![CDATA[安装 pippip是 python 的包管理工具。在本文中将使用 python 版本的 shadowsocks，此版本的 shadowsocks 已发布到 pip 上，因此我们需要通过 pip 命令来安装。 在控制台执行以下命令安装 pip： 12[root@server ~]# curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"[root@server ~]# python get-pip.py 安装配置 shadowsocks在控制台执行以下命令安装 shadowsocks： 12[root@server ~]# pip install --upgrade pip[root@server ~]# pip install shadowsocks 安装完成后，需要创建shadowsocks的配置文件/etc/shadowsocks.json，编辑内容如下： 123456789101112[root@server ~]# vim /etc/shadowsocks.json&#123; "server": "0.0.0.0", "local_address": "127.0.0.1", "local_port": 1080, "port_password": &#123; "8080": "填写密码", "8081": "填写密码" &#125;, "timeout": 600, "method": "aes-256-cfb"&#125; 说明： method为加密方法，可选aes-128-cfb, aes-192-cfb, aes-256-cfb, bf-cfb, cast5-cfb, des-cfb, rc4-md5, chacha20, salsa20, rc4, tableport_password为端口对应的密码，可使用密码生成工具生成一个随机密码以上两项信息在配置 shadowsocks 客户端时需要配置一致，具体说明可查看 shadowsocks 的帮助文档。 如果你不需要配置多个端口的话，仅配置单个端口，则可以使用以下配置： 123456&#123; "server": "0.0.0.0", "server_port": 8080, "password": "填写密码", "method": "aes-256-cfb"&#125; 说明： server_port为服务监听端口 password为密码 同样的以上两项信息在配置 shadowsocks 客户端时需要配置一致。 配置自启动编辑shadowsocks 服务的启动脚本文件，内容如下： 12345678910[root@server ~]# vim /etc/systemd/system/shadowsocks.service[Unit]Description=Shadowsocks[Service]TimeoutStartSec=0ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json[Install]WantedBy=multi-user.target 执行以下命令启动 shadowsocks 服务： 12[root@server ~]# systemctl enable shadowsocks[root@server ~]# systemctl start shadowsocks 检查 shadowsocks 服务是否已成功启动，可以执行以下命令查看服务的状态： 1systemctl status shadowsocks -l 确认服务启动成功后，配置防火墙规则，开放你配置的端口，不然客户端是无法连接的： 123456[root@server ~]# firewall-cmd --zone=public --add-port=8080/tcp --permanentsuccess[root@server ~]# firewall-cmd --zone=public --add-port=8081/tcp --permanentsuccess[root@server ~]# firewall-cmd --reloadsuccess 附上一键安装脚本代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#!/bin/bash# Install Shadowsocks on CentOS 7echo "Installing Shadowsocks..."random-string()&#123; cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $&#123;1:-32&#125; | head -n 1&#125;CONFIG_FILE=/etc/shadowsocks.jsonSERVICE_FILE=/etc/systemd/system/shadowsocks.serviceSS_PASSWORD=$(random-string 32)SS_PORT=8388SS_METHOD=aes-256-cfbSS_IP=`ip route get 1 | awk '&#123;print $NF;exit&#125;'`GET_PIP_FILE=/tmp/get-pip.py# install pipcurl "https://bootstrap.pypa.io/get-pip.py" -o "$&#123;GET_PIP_FILE&#125;"python $&#123;GET_PIP_FILE&#125;# install shadowsockspip install --upgrade pippip install shadowsocks# create shadowsocls configcat &lt;&lt;EOF | sudo tee $&#123;CONFIG_FILE&#125;&#123; "server": "0.0.0.0", "server_port": $&#123;SS_PORT&#125;, "password": "$&#123;SS_PASSWORD&#125;", "method": "$&#123;SS_METHOD&#125;"&#125;EOF# create servicecat &lt;&lt;EOF | sudo tee $&#123;SERVICE_FILE&#125;[Unit]Description=Shadowsocks[Service]TimeoutStartSec=0ExecStart=/usr/bin/ssserver -c $&#123;CONFIG_FILE&#125;[Install]WantedBy=multi-user.targetEOF# start servicesystemctl enable shadowsockssystemctl start shadowsocks# view service statussleep 5systemctl status shadowsocks -lecho "================================"echo ""echo "Congratulations! Shadowsocks has been installed on your system."echo "You shadowsocks connection info:"echo "--------------------------------"echo "server: $&#123;SS_IP&#125;"echo "server_port: $&#123;SS_PORT&#125;"echo "password: $&#123;SS_PASSWORD&#125;"echo "method: $&#123;SS_METHOD&#125;"echo "--------------------------------" 配置客户端我这里配置的是windows的客户端，挺方便的，点击即用，不需要安装。 Windows客户端下载地址：https://github.com/shadowsocks/shadowsocks-windows/releases Mac客户端下载地址：https://github.com/shadowsocks/ShadowsocksX-NG/releases Android客户端下载地址：https://github.com/shadowsocks/shadowsocks-android/releases 配置BBR加速什么是BBR：TCP BBR是谷歌出品的TCP拥塞控制算法。BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。 Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。 TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。 BBR解决了两个问题： 在有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。 降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。Google 在 2016年9月份开源了他们的优化网络拥堵算法BBR，最新版本的 Linux内核(4.9-rc8)中已经集成了该算法。 对于TCP单边加速，并非所有人都很熟悉，不过有另外一个大名鼎鼎的商业软件“锐速”，相信很多人都清楚。特别是对于使用国外服务器或者VPS的人来说，效果更佳。 BBR项目地址：https://github.com/google/bbr 升级内核，第一步首先是升级内核到支持BBR的版本： 1.yum更新系统版本：yum update2.查看系统版本： 123[root@server ~]# cat /etc/redhat-release CentOS Linux release 7.4.1708 (Core) [root@server ~]# 3.安装elrepo并升级内核： 123[root@server ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org[root@server ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm[root@server ~]# yum --enablerepo=elrepo-kernel install kernel-ml -y 4.更新grub文件并重启系统： 12345678[root@server ~]# egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \'CentOS Linux 7 Rescue 8619ff5e1306499eac41c02d3b23868e (4.14.14-1.el7.elrepo.x86_64)CentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)CentOS Linux (3.10.0-693.11.6.el7.x86_64) 7 (Core)CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)CentOS Linux (0-rescue-c73a5ccf3b8145c3a675b64c4c3ab1d4) 7 (Core)[root@server ~]# grub2-set-default 0[root@server ~]# reboot 5.重启完成后查看内核是否已更换为4.14版本： 123[root@server ~]# uname -r4.14.14-1.el7.elrepo.x86_64[root@server ~]# 6.开启bbr： 123[root@server ~]# vim /etc/sysctl.conf # 在文件末尾添加如下内容net.core.default_qdisc = fqnet.ipv4.tcp_congestion_control = bbr 7.加载系统参数： 123456[root@vultr ~]# sysctl -pnet.ipv6.conf.all.accept_ra = 2net.ipv6.conf.eth0.accept_ra = 2net.core.default_qdisc = fqnet.ipv4.tcp_congestion_control = bbr[root@vultr ~]# 如上，输出了我们添加的那两行配置代表正常。 8.确定bbr已经成功开启： 12345[root@vultr ~]# sysctl net.ipv4.tcp_available_congestion_controlnet.ipv4.tcp_available_congestion_control = bbr cubic reno[root@vultr ~]# lsmod | grep bbrtcp_bbr 20480 2 [root@vultr ~]# 输出内容如上，则表示bbr已经成功开启。]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>博客</tag>
        <tag>linux</tag>
        <tag>ss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux常用的环境安装]]></title>
    <url>%2F2019%2F01%2F29%2Flinux%E5%B8%B8%E7%94%A8%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[以tar.xz结尾的压缩包解压方式先 xz -d ***.tar.xz 得到tar结尾的包 然后 tar -xvf ***.tar 解压 Linux安装rz/sz命令 在SecureCRT这样的ssh登录软件里, 通过在Linux界面里输入rz/sz命令来上传/下载文件. 对于某些linux版本, rz/sz默认没有安装所以需要手工安装。 sz: 将选定的文件发送(send)到本地机器; rz：运行该命令会弹出 一个文件选择窗口, 从本地选择文件上传到服务器(receive). 最简单的是yum安装 yum install lrzsz 没有网络的时候可以下载安装包安装 首先通过sftp工具把安 装文件上传到tmp目录下. # cd tmp # wget http://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz # tar zxvf lrzsz-0.12.20.tar.gz &amp;&amp; cd lrzsz-0.12.20 # ./configure &amp;&amp; make &amp;&amp; make install 上面安装过程默认把lsz和lrz安装到了/usr/local/bin/目录下, 下面创建软链接, 并命名为rz/sz: # cd /usr/bin # ln -s /usr/local/bin/lrz rz # ln -s /usr/local/bin/lsz sz Linux安装wgetyum -y install wget Linux安装Gityum install git-core Linux安装Node.js不推荐在线安装，推荐编译安装： 官网获取到下载地址 wget https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gz 解压 tar -zxvf node-v10.15.0.tar.gz 解压完成后依次执行： cd node-v10.15.0 ./configure make（编译时间较长，耐心等待） 编译完成后，使用下面命令安装： sudo make install 这里一定要加sudo 此外，我们还可以使用git在github上将源码clone下来，同样执行以上命令编译安装。执行./configure可能会提示确实c++框架，安装即可 sudo yum install gcc gcc-c++ 编译安装时间太长而且容易出错，可以使用yum安装yum安装正常情况 yum install nodejs，但是会报错，原来 CentOS 的官方源并没有 Nodejs 的安装包，安装需要添加 EPEL 源，执行以下命令安装：参考 123sudo rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpmsudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6sudo yum -y install nodejs npm --enablerepo=epel]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>linux</tag>
        <tag>学习</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac常用软件收藏]]></title>
    <url>%2F2019%2F01%2F25%2FMac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%94%B6%E8%97%8F%2F</url>
    <content type="text"><![CDATA[软件收藏 xclient | 常用软件都有，个别因为版权问题下架，所有安装包解压需要密码 xclient.info 爱情守望者 | 差不多，安装包没有密码 史蒂芬周的博客 | 一个博客，居然还收费下载，有的也免费，随便看看还行，主要用来看软件更新日志 mac-torrent-download | 神站不解释，不过广告超多，而且都是强制广告，需翻墙 油猴脚本 | 油猴的脚本站 MSDN | 可以下载到纯净的系统安装包 旧版iTunes | 可以下载最后一个支持下载安装包的iTunes Homebrew | macOS 缺失的软件包的管理器 freedownloadmanager | 一个全平台的下载器（顶替迅雷） idea.lanyus | 破解idea专用 idea 2018.1破解激活方法,有效期至2099年 | 目前有效 sequelpro | mac上一个mysql图形化界面工具，超喜欢，可惜不更新了 IINA | Mac上一个开源播放器，超好用 PicGo | 全平台图床工具 Mos | 一个用于在 MacOS 上平滑你的鼠标滚动效果或单独设置滚动方向的小工具, 让你的滚轮爽如触控板 ieaseMusic | Mac上开源的网易云播放器，界面不错 Photon | 基于aria2的轻量级多线程下载器。 迅雷 U 享版 | 迅雷 U 享版 irreader | 订阅网页、RSS和Podcast，具备急速的阅读体验，高品质、免费、无广告、多平台的RSS阅读器。 Glacier | 展示macos图标 Easy-to-RSS | 功能：获取网页RSS，复制到剪贴板并打开该RSS网页 Background Music | mac上可以单独调节各种音量大小的软件 壁纸网站 https://interfacelift.com/wallpaper/downloads/date/any/ | 质量高，更新慢 https://unsplash.com/ | 质量中等，更新较快 https://alpha.wallhaven.cc/random?page=2 https://wallions.com/search https://www.lifeofpix.com/ https://visualhunt.com/ https://wallions.com/search/mountain http://streetwill.co/ https://unsplash.com/@joshshutler?utm_source=osx&amp;utm_medium=menuItem&amp;utm_campaign=wallcat https://lai.yuweining.cn/archives/575/]]></content>
      <categories>
        <category>MacBook</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>MacBook</tag>
        <tag>收藏</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux docker Shadowsocks 常规操作]]></title>
    <url>%2F2019%2F01%2F25%2Flinux%20docker%20Shadowsocks%20%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[linux上跑ss，真的很简单第一步先装docker,CentOS最好是64位的，最好是CentOS7,6的话没试过应该有其他的办法 先检查内核版本 $ uname -r 返回的值大于3.10即可。 使用 sudo 或 root 权限的用户登入终端。 确保yum是最新的 $ yum update 安装 docker yum install docker -y 启动 docker 服务 service docker start chkconfig docker on 拉取 docker 镜像 docker pull oddrationale/docker-shadowsocks ! 运行 docker 镜像 docker run -d -p 12345:12345 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 12345 -k welcome -m aes-256-cfb -d参数允许 docker 常驻后台运行 -p来指定要映射的端口，这里端口号统一保持一致即可。例如：12345 -s服务器 IP 地址，不用动 -k后面设置你的 VPN 的密码，比如：welcome -m指定加密方式 运行docker ps查看容器是否已成功运行起来了。 docker的常用命令汇总1、docker的启动、停止、重启[root@localhost ~]# service docker restart Redirecting to /bin/systemctl restart docker.service [root@localhost ~]# service docker stop Redirecting to /bin/systemctl stop docker.service [root@localhost ~]# service docker start Redirecting to /bin/systemctl start docker.service 2、docker创建一个容器[root@localhost ~]# docker run -it -v /docker_test:/yufei --name yufei_6 centos [root@724e7701f0d4 /]# -i：允许我们对容器内的 (STDIN) 进行交互 -t：在新容器内指定一个伪终端或终端 -v：是挂在宿机目录， /docker_test是宿机目录，/yufei是当前docker容器的目录，宿机目录必须是绝对的。 --name：是给容器起一个名字，可省略，省略的话docker会随机产生一个名字 3、docker启动的容器列表[root@localhost ~]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 724e7701f0d4 centos &quot;/bin/bash&quot; 4 minutes ago Up 4 minutes yufei_6 f9097691663e centos &quot;/bin/bash&quot; 5 minutes ago Up 5 minutes yufei_5 [root@localhost ~]# 4、查看docker创建的所有容器[root@localhost ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 724e7701f0d4 centos &quot;/bin/bash&quot; 5 minutes ago Up 5 minutes yufei_6 f9097691663e centos &quot;/bin/bash&quot; 6 minutes ago Up 6 minutes yufei_5 e59a540fb979 centos &quot;/bin/base&quot; 6 minutes ago Created yufei_4 ff49dfedea4f centos &quot;/bin/bash&quot; 2 hours ago Exited (137) 10 minutes ago yufei_03 d2cc70abb5a5 centos &quot;/bin/bash&quot; 2 hours ago Exited (127) 2 hours ago yufei_02 2d48fc5b7c17 centos &quot;/bin/bash&quot; 2 hours ago Exited (127) 2 hours ago yufei_01 [root@localhost ~]# 5、启动、停止、重启某个docker 容器[root@localhost ~]# docker start yufei_01 yufei_01 [root@localhost ~]# docker stop yufei_01 yufei_01 [root@localhost ~]# docker restart yufei_01 yufei_01 [root@localhost ~]# 6、查看指定容器的日志记录[root@back bin]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES baa114bbd3cd oddrationale/docker-shadowsocks &quot;/usr/local/bin/ss...&quot; 28 minutes ago Up 28 minutes 0.0.0.0:9527-&gt;9527/tcp eloquent_goldwasser [root@back bin]# docker logs -f baa114bbd3cd 7、删除某个容器，若正在运行，需要先停止[root@localhost ~]# docker rm yufei_01 Error response from daemon: You cannot remove a running container 2d48fc5b7c17b01e6247cbc012013306faf1e54f24651d5e16d6db4e15f92d33. Stop the container before attempting removal or use -f [root@localhost ~]# docker stop yufei_01 yufei_01 [root@localhost ~]# docker rm yufei_01 yufei_01 [root@localhost ~]# 8、删除所有容器[root@localhost ~]# docker rm $(docker ps -a -q) Error response from daemon: You cannot remove a running container 724e7701f0d4a830167e21f75b470235a0e408fd6cc2913403426e96f69cba11. Stop the container before attempting removal or use -f Error response from daemon: You cannot remove a running container f9097691663ee36f9d2ee56afbdcca0eeb8b63e5590ddf18c0c42954c93b9f06. Stop the container before attempting removal or use -f [root@localhost ~]# [root@localhost ~]# [root@localhost ~]# docker stop yufei_6 yufei_6 [root@localhost ~]# docker stop yufei_5 yufei_5 [root@localhost ~]# docker rm $(docker ps -a -q) 724e7701f0d4 f9097691663e [root@localhost ~]# 9、镜像列出镜像:docker image ls或docker images列出所有镜像：docker image ls -a列出所有镜像：docker images -a查看镜像、容器、数据卷所占用的空间:docker system df删除镜像:docker image rm]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>linux</tag>
        <tag>ss</tag>
        <tag>docker</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacBook Pro休眠掉电问题]]></title>
    <url>%2F2019%2F01%2F25%2FMacBook%20Pro%E4%BC%91%E7%9C%A0%E6%8E%89%E7%94%B5%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[重启 Macbook，在启动的时候按住 command + R，然后系统会尽入 recovery 模式。 选择语言，点下一步，然后在菜单栏选择打开 terminal。 输入 csrutil disable 禁掉 SIP，然后正常重启 macbook。 打开 terminal，输入 ioreg -l | grep board-id 查看你的 board-id， 在这个目录 /System/Library/Extensions/IOPlatformPluginFamily.kext/Contents/PlugIns/X86PlatformPlugin.kext/Contents/Resources 下面找到你的 board-id 对应的 .plist 文件 用管理员账户编辑上一步中的 plist 文件，比如 sudo vim Mac-2BD2C31983FE1634.plist 把 TCPKeepAliveDuringSleep 修改为 false, 然后保存 &lt;key&gt;TCPKeepAliveDuringSleep&lt;/key&gt; &lt;false/&gt; &lt;key&gt;NotificationWake&lt;/key&gt; &lt;false/&gt; &lt;key&gt;DNDWhileDisplaySleeps&lt;/key&gt; &lt;true/&gt; 重启 mac，按照第 1，2 步进入 recovery 模式，开启 SIP，csrutil enable。 正常重启 mac，就可以了。可以用这个命令 ioreg -l | grep IOPlatformFeatureDefaults 来查看修改后的状态。]]></content>
      <categories>
        <category>MacBook</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>技巧</tag>
        <tag>MacBook</tag>
        <tag>电量</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chrome 原生工具进行网页长截图]]></title>
    <url>%2F2019%2F01%2F25%2FChrome%20%E5%8E%9F%E7%94%9F%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[首先按下 ⌘Command + ⌥Option + I（Windows 为 F12）快捷键，召唤出调试界面。 随后，按下 ⌘Command + ⇧Shift + P（Windows 为 Ctrl + Shift + P），输入命令 Capture full size screenshot（只输前几个字母就能找到），敲下回车，Chrome 就会自动截取整个网页内容并保存至本地。由于是渲染引擎直接输出，其比普通扩展速度更快，分辨率也更高。 除了普通长截图以外，你还可以利用这一功能截取手机版网页长图。只需要按下 ⌘Command + ⇧Shift + M （Windows 为 Ctrl + Shift + M）模拟移动设备，再按刚才的方法运行命令就可以了。在顶部的工具栏中，你可以选择要模拟的设备和分辨率等设置。 如果你想准确截取网页的某一部分，可以按下 ⌘Command + ⇧Shift + C（Windows 为 Ctrl + Shift + C）嗅探元素。选中想要的部分后，再运行 Capture node screenshot 命令，一张完美的选区截图就诞生了。]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>Chrome</tag>
        <tag>技巧</tag>
        <tag>截图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 最常用的几个命令]]></title>
    <url>%2F2019%2F01%2F25%2FHexo%20%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:hexo shexo s 启动本地服务器，用于预览主题。默认地址： http://localhost:4000/ hexo s 是 hexo server 的缩写，命令效果一致；预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。 hexo newhexo new &quot;学习笔记 六&quot; 新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。 文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。 hexo dhexo d 自动生成网站静态文件，并部署到设定的仓库。 hexo d 是 hexo deploy 的缩写，命令效果一致。 hexo cleanhexo clean 清除缓存文件 db.json 和已生成的静态文件 public 。 网站显示异常时可以执行这条命令试试。 hexo ghexo g 生成网站静态文件到默认设置的 public 文件夹。 便于查看网站生成的静态文件或者手动部署网站；如果使用自动部署，不需要先执行该命令；hexo g 是 hexo generate 的缩写，命令效果一致。 hexo new pagehexo new page aboutme 新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/ 标题可以为中文，但一般习惯用英文；页面标题和文章一样可以随意修改；页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。 md文章格式1234567---title: Hexo 最常用的几个命令date: 2019-01-25 16:25:50tags: [随笔,Hexo,学习,命令]categories: Hexo---]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>Hexo</tag>
        <tag>学习</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2F2019%2F01%2F24%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[linux命令很多，但是常用的也就那么多，记录一些liunx常用的命令tab tab不是命令，是键盘上的tab键，这个虽然不是命令但是很重要，可以帮你补全文件信息和路径信息，减少手打产生的错误，例如你要进入到/usr/local,你使用cd /u然后按tab就会自动帮你打出cd /usr,如果你不知道/usr目录下有哪些文件夹，你可以连续按两次tab，就会在保留当前cd /usr的命令下并显示出/usr下的文件 cd 进入文件夹，比如 cd /home , cd /usr/data cd .. 的意思是返回上一级 cd ./path 切换到当前目录下的path目录中，“.”表示当前目录 cd ../path 切换到上层目录中的path目录中，“..”表示上一层目录 pwd 查看当前目录路径 ls 查看当前目录下的所有文件 ll 也是查看当前目录下所有文件，不过这个显示每个文件的详情 cp 复制命令，例如：cp test.txt test1.txt 复制test.txt文件为test1.txt mkdir 新建文件夹命令，例：mkdir 111 vi,vim vi 是linux自带的文本编辑命令，vim是vi的升级版，vim命令需要安装才有，可以使用这两个命令编辑文本，例如：vi test.txt 就会进入文本编辑模式，但是这个时候你是没法编辑的，如果你要开始编辑你需要先输入字母 a 激活编辑模式。 下面有INSERT字样提示你可以编辑 当你编辑完成后可以按 Esc 退出编辑模式如果你要保存你需要直接输入 :wq 并回车,如果放弃保存 直接输入 :q 并回车 cat 预览模式查看文件，例：cat test.txt ,直接显示文本内信息，但是不能编辑 mv 移动命令，将文件已到另一个文件夹，例：mv test.txt /home/data/111/ rm 删除命令，慎用，linux没有回收站功能，删除之前要看仔细了再操作，例如 rm test.txt 删除文件夹和文件夹内的文件需要用 rm -rf ps -ef ps -ef是查看进程的命令，通常需要搭配 grep 一起用，例如查看当前服务器上java进程，ps -ef|grep java 就会显示所有的java进程，每个进程的执行目录也有，如果你想找一台服务器上的某个服务文件路径，就可以使用这个命令查看之后找到路径 netstat -tunlp Linux netstat命令用于显示网络状态。 利用netstat指令可让你得知整个Linux系统的网络情况 123456789101112131415161718192021222324-a或--all 显示所有连线中的Socket。-A&lt;网络类型&gt;或--&lt;网络类型&gt; 列出该网络类型连线中的相关地址。-c或--continuous 持续列出网络状态。-C或--cache 显示路由器配置的快取信息。-e或--extend 显示网络其他相关信息。-F或--fib 显示FIB。-g或--groups 显示多重广播功能群组组员名单。-h或--help 在线帮助。-i或--interfaces 显示网络界面信息表单。-l或--listening 显示监控中的服务器的Socket。-M或--masquerade 显示伪装的网络连线。-n或--numeric 直接使用IP地址，而不通过域名服务器。-N或--netlink或--symbolic 显示网络硬件外围设备的符号连接名称。-o或--timers 显示计时器。-p或--programs 显示正在使用Socket的程序识别码和程序名称。-r或--route 显示Routing Table。-s或--statistice 显示网络工作信息统计表。-t或--tcp 显示TCP传输协议的连线状况。-u或--udp 显示UDP传输协议的连线状况。-v或--verbose 显示指令执行过程。-V或--version 显示版本信息。-w或--raw 显示RAW传输协议的连线状况。-x或--unix 此参数的效果和指定"-A unix"参数相同。--ip或--inet 此参数的效果和指定"-A inet"参数相同。 kill -9 结束某个进程，结束一个进程你需要知道进程的pid，用ps -ef和netstat -tunlp都可以看到进程的pid，例如关闭一个进程：kill -9 1162 linux命令都不难，常用的几个记住就行，最主要是要多敲，熟能生巧而已，还有些其他命令比如解压缩打包或者启动服务的命令，具体要看你是什么格式的压缩包和什么样的服务，不同的服务启动命令不一样，具体情况具体看就好]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>linux</tag>
        <tag>学习</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode Intergrated Teiminal 集成终端]]></title>
    <url>%2F2019%2F01%2F23%2Fvscode%E9%85%8D%E7%BD%AE%E7%B1%BB%E4%BC%BClinux%E5%91%BD%E4%BB%A4%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[windows没有ls,pwd等类似linux的命令，着实不方便，虽然有mkdir，但是用习惯了linux会觉得很奇怪，强大的vscode居然有这种插件可以解决，记一下安装方法： 环境：windows7 设置-搜索 terminal.integrated.shellArgs.osx 工作区设置或用户设置配置 { &quot;terminal.integrated.shell.windows&quot;: &quot;C:/Program Files/Git/bin/bash.exe&quot;, &quot;explorer.confirmDelete&quot;: false } 保存会提示重启，ctrl + shift + ~ 启动终端面板]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>linux</tag>
        <tag>配置</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ss的一些配置和命令]]></title>
    <url>%2F2019%2F01%2F23%2Fss%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[ss命令后台运行：ssserver -c /etc/shadowsocks.json -d start 后台停止：ssserver -c /etc/shadowsocks.json -d stop 前台运行：ssserver -c /etc/shadowsocks/config.json 修改配置： vi /etc/shadowsocks.json SSR: 管理界面：bash ssr.sh 锐速命令： 启动： service serverSpeeder start 关闭： service serverSpeeder stop 状态： service serverSpeeder status 开启防火墙端口： 端口号是你自己设置的端口12$ firewall-cmd --permanent --zone=public --add-port=443/tcp$ firewall-cmd --reload]]></content>
      <categories>
        <category>ss</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>linux</tag>
        <tag>ss</tag>
        <tag>配置</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo加上动态看板娘]]></title>
    <url>%2F2019%2F01%2F23%2Fhexo%20%E6%B7%BB%E5%8A%A0live2d%E7%9C%8B%E6%9D%BF%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[hexo 添加live2d看板动画首先贴出官网代码官网地址配置：https://www.npmjs.com/package/hexo-helper-live2d 遇到问题： 替换主题，在项目跟目录创建文件夹live2d_models,在这里选择你喜欢的妹子 然后去这里找到对应的安装包文件名，先贴一下免得下次找： 安装插件：npm install --save hexo-helper-live2d live2d-widget-model-chitose live2d-widget-model-epsilon2_1 live2d-widget-model-gf live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru) live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru) live2d-widget-model-haruto live2d-widget-model-hibiki live2d-widget-model-hijiki live2d-widget-model-izumi live2d-widget-model-koharu live2d-widget-model-miku live2d-widget-model-ni-j live2d-widget-model-nico live2d-widget-model-nietzsche live2d-widget-model-nipsilon live2d-widget-model-nito live2d-widget-model-shizuku live2d-widget-model-tororo live2d-widget-model-tsumiki live2d-widget-model-unitychan live2d-widget-model-wanko live2d-widget-model-z16 安装主题：npm install live2d-widget-model-chitose 在主题_config.yml的参数配置贴一下： # Live2D ## https://github.com/EYHN/hexo-helper-live2d live2d: enable: true # enable: false scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: use: live2d-widget-model-haruto # npm-module package name # use: wanko # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/wanko # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url display: superSample: 2 width: 100 height: 150 position: right hOffset: 0 vOffset: -0 mobile: show: true scale: 0.1]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记录搭建博客遇到的一些问题]]></title>
    <url>%2F2019%2F01%2F22%2F%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[git和hexo两者的git处理方式不一样，通过hexo提交的话不会提交源码只会提交编译后的html，所以一旦源码丢失那就gg了 hexo环境的搭建，这个自己百度，很简单 我喜欢的next主题配置，参见：https://www.jianshu.com/p/9f0e90cc32c2 jekyll博客也是很不错的，可以直接上传markdown文件生成文章，相对hexo来说是要方便一点，但是犹豫hexo的驱动比较牛逼，我比较喜欢炫酷的效果所以还是选择了hexo 评论系统采用的是Valine，gitment有bug，经常js报错很难受，gitalk也是,Disqus需要翻墙，相对来说Valine最合适，不需要登录就可以评论 好了就写这么多，搭建的过程虽然网上有很多教程，但是还是会遇到一些npm node 之类的错误，自己还是要多查多思考，也没那么难]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
